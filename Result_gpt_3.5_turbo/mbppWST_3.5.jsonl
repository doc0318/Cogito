{"task_id": 3, "completion": "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nassert is_not_prime(2) == False"}
{"task_id": 4, "completion": "from typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    return heapq.nlargest(n, nums)"}
{"task_id": 6, "completion": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result & (xor_result - 1) == 0\n\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": 8, "completion": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num*num for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": 9, "completion": "def find_Rotations(str: str) -> int:\n    if len(str) < 2:\n        return 0\n    n = len(str)\n    str += str\n    for i in range(1, n+1):\n        if str[:n] == str[i:i+n]:\n            return i\n    return n\n\nassert find_Rotations('aaaa') == 1"}
{"task_id": 11, "completion": "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s\n\nassert remove_Occ('hello', 'l') == 'heo'"}
{"task_id": 12, "completion": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    return [row for row in sorted(M, key=lambda x: sum(x))]"}
{"task_id": 14, "completion": "def find_Volume(l: int, b: int, h: int) -> int:\n    return int(0.5 * b * h * l)\n\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": 16, "completion": "def text_lowercase_underscore(text: str) -> bool:\n    lowercase_sequences = [word.islower() for word in text.split('_')]\n    return all(lowercase_sequences) and text.count('_') > 0"}
{"task_id": 17, "completion": "def square_perimeter(a: int) -> int:\n    return 4 * a\n\nassert square_perimeter(10) == 40"}
{"task_id": 18, "completion": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    dirty_chars = set(second_string)\n    return ''.join(char for char in string if char not in dirty_chars)"}
{"task_id": 19, "completion": "def test_duplicate(arraynums: List[int]) -> bool:\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\nassert test_duplicate([1, 2, 3, 4, 5]) == False"}
{"task_id": 20, "completion": "def is_woodall(x: int) -> bool:\n    if x <= 0:\n        return False\n    n = 1\n    while True:\n        woodall_num = n * 2**n - 1\n        if woodall_num == x:\n            return True\n        elif woodall_num > x:\n            return False\n        n += 1\n\nassert is_woodall(383) == True"}
{"task_id": 56, "completion": "def checks(n: int) -> bool:\n    return n == 2*int(str(n)[::-1]) - 1\n\nassert checks(70) == False"}
{"task_id": 57, "completion": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = list(map(str, arr))\n    arr.sort(key=lambda x: x*10, reverse=True)\n    return int(''.join(arr))\n\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": 58, "completion": "def opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0\n\nassert opposite_Signs(1, -2) == True"}
{"task_id": 59, "completion": "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"}
{"task_id": 61, "completion": "def count_Substrings(s: str) -> int:\n    def digit_sum(num):\n        return sum(int(d) for d in str(num))\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n\n    return count\n\nassert count_Substrings('112112') == 6"}
{"task_id": 62, "completion": "def smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"Input list cannot be empty\")\n        \n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n            \n    return smallest\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"task_id": 63, "completion": "def max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        max_diff = max(max_diff, diff)\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": 64, "completion": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": 65, "completion": "def recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n    return total_sum\n\nassert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21"}
{"task_id": 66, "completion": "def pos_count(lst: List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\nassert pos_count([1, -2, 3, -4]) == 2"}
{"task_id": 67, "completion": "def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_number(2) == 2"}
{"task_id": 68, "completion": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = True\n    decreasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            increasing = False\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n\nassert is_Monotonic([6, 5, 4, 4]) == True"}
{"task_id": 69, "completion": "def is_sublist(l: List[int], s: List[int]) -> bool:\n    for i in range(len(l) - len(s) + 1):\n        if all(l[i+j] == s[j] for j in range(len(s))):\n            return True\n    return False\n\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False"}
{"task_id": 70, "completion": "def get_equal(Input: List[List[int]]) -> bool:\n    if not Input:\n        return True\n    first_len = len(Input[0])\n    return all(len(sublist) == first_len for sublist in Input)"}
{"task_id": 71, "completion": "def comb_sort(nums: List[int]) -> List[int]:\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\n# Test Case\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": 72, "completion": "import math\n\ndef dif_Square(n: int) -> bool:\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.isqrt(n + i*i) ** 2 == n + i*i:\n            return True\n    return False\n\nassert dif_Square(5) == True"}
{"task_id": 74, "completion": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    \n    color_patterns = {}\n    seen_colors = set()\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_patterns:\n            if color_patterns[color] != pattern:\n                return False\n        else:\n            if color in seen_colors:\n                return False\n            color_patterns[color] = pattern\n            seen_colors.add(color)\n    \n    return True\n\nassert is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b']) == True"}
{"task_id": 75, "completion": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": 77, "completion": "def is_Diff(n: int) -> bool:\n    odds_sum = 0\n    evens_sum = 0\n    is_odd = True\n    \n    while n:\n        if is_odd:\n            odds_sum += n % 10\n        else:\n            evens_sum += n % 10\n        n //= 10\n        is_odd = not is_odd\n    \n    return (odds_sum - evens_sum) % 11 == 0\n\nassert is_Diff(12345) == False"}
{"task_id": 79, "completion": "def word_len(s: str) -> bool:\n    return len(s) % 2 == 1"}
{"task_id": 80, "completion": "def tetrahedral_number(n: int) -> int:\n    return (n * (n + 1) * (n + 2)) // 6\n\nassert tetrahedral_number(5) == 35"}
{"task_id": 83, "completion": "def get_Char(strr: str) -> str:\n    total_sum = sum(ord(ch) - ord('a') for ch in strr)\n    return chr((total_sum % 26) + ord('a'))"}
{"task_id": 84, "completion": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\nassert sequence(10) == 6"}
{"task_id": 86, "completion": "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * n - 3 * n + 1\n\nassert centered_hexagonal_number(10) == 271"}
{"task_id": 87, "completion": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"}
{"task_id": 88, "completion": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\n# Test case\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": 89, "completion": "def closest_num(N: int) -> int:\n    closest_smaller = -1\n    for i in range(N - 1, 0, -1):\n        if i < N:\n            closest_smaller = i\n            break\n    return closest_smaller\n\nassert closest_num(11) == 10"}
{"task_id": 90, "completion": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    max_length = 0\n    for word in list1:\n        max_length = max(max_length, len(word))\n    return max_length\n\nassert len_log(['python', 'PHP', 'bigdata']) == 7"}
{"task_id": 91, "completion": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\nassert find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack') == True"}
{"task_id": 92, "completion": "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    increasing = num_str[0] < num_str[1]\n    \n    for i in range(1, len(num_str) - 1):\n        if (increasing and num_str[i] > num_str[i + 1]) or (not increasing and num_str[i] < num_str[i + 1]):\n            increasing = not increasing\n        else:\n            return False\n    return True\n\nassert is_undulating(1212121)  # It should return True"}
{"task_id": 93, "completion": "def power(a: int, b: int) -> int:\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n\nassert power(3, 4) == 81"}
{"task_id": 94, "completion": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    min_second_val = float('inf')\n    result = ''\n\n    for item in test_list:\n        if item[1] < min_second_val:\n            min_second_val = item[1]\n            result = item[0]\n\n    return result\n\n# Test case\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": 95, "completion": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    return min(len(sublist) for sublist in lst)\n\nassert Find_Min_Length([[1], [1, 2]]) == 1"}
{"task_id": 96, "completion": "import math\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    return count\n\nassert divisor(15) == 4"}
{"task_id": 97, "completion": "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened))"}
{"task_id": 99, "completion": "def decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n\n    binary_str = ''\n    while n > 0:\n        binary_str += str(n % 2)\n        n //= 2\n\n    return binary_str[::-1]\n\nassert decimal_to_binary(8) == '1000'"}
{"task_id": 100, "completion": "def next_smallest_palindrome(num: int) -> int:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    num_str = str(num)\n    n = len(num_str)\n  \n    if all(d == '9' for d in num_str):\n        return int('1' + '0' * (n - 1) + '1')\n  \n    half = num_str[:(n + 1) // 2]\n    palindrome = int(half + half[:-1][::-1]) if n % 2 == 0 else int(half + half[:-2][::-1])\n\n    if palindrome <= num:\n        half = str(int(half) + 1)\n        palindrome = int(half + half[:-1][::-1]) if n % 2 == 0 else int(half + half[:-2][::-1])\n\n    return palindrome\n\n# Test case\nassert next_smallest_palindrome(99) == 101"}
{"task_id": 101, "completion": "def kth_element(arr: List[int], k: int) -> int:\n    if not arr or k < 1 or k > len(arr):\n        return -1\n    return arr[k-1]\n\nassert kth_element([12, 3, 5, 7, 19], 2) == 3"}
{"task_id": 102, "completion": "def snake_to_camel(word: str) -> str:\n    return ''.join(word.capitalize() for word in word.split('_'))"}
{"task_id": 103, "completion": "def eulerian_num(n: int, m: int) -> int:\n    if m == 0:\n        return 1 if n == 0 else 0\n    if m >= n:\n        return 0\n    result = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        result[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            result[i][j] = (i - j) * result[i - 1][j - 1] + (j + 1) * result[i - 1][j]\n    return result[n][m]"}
{"task_id": 104, "completion": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]"}
{"task_id": 105, "completion": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(1 for val in lst if val)"}
{"task_id": 106, "completion": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    return test_tup + tuple(test_list)"}
{"task_id": 108, "completion": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)"}
{"task_id": 109, "completion": "def odd_Equivalent(s: str, n: int) -> int:\n    binary = int(s, 2)\n    count = 0\n    for _ in range(n):\n        binary = ((binary >> 1) | (binary << (len(s) - 1))) & ((1 << len(s)) - 1)\n        count += bin(binary).count('1') % 2\n    return count"}
{"task_id": 113, "completion": "import re\n\ndef check_integer(text: str) -> bool:\n    return bool(re.match(r'^[-+]?[0-9]+$', text))\n\nassert check_integer('python') == False"}
{"task_id": 116, "completion": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    return int(''.join(map(str, nums)))\n\n\n\nassert tuple_to_int((1, 2, 3)) == 123"}
{"task_id": 117, "completion": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    processed_list = []\n    for item in test_list:\n        try:\n            num1 = float(item[0])\n            num2 = float(item[1])\n            processed_list.append((num1, num2))\n        except ValueError:\n            pass\n    return processed_list"}
{"task_id": 118, "completion": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()"}
{"task_id": 119, "completion": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == 0 and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        if mid == len(arr) - 1 and arr[mid] != arr[mid-1]:\n            return arr[mid]\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        if (mid % 2 == 0 and arr[mid] == arr[mid+1]) or (mid % 2 == 1 and arr[mid] == arr[mid-1]):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n# Test Case\nassert search([1, 1, 2, 2, 3]) == 3"}
{"task_id": 120, "completion": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for tup in list1:\n        if len(tup) == 2:\n            product = abs(tup[0] * tup[1])\n            max_product = max(max_product, product)\n    return max_product\n\n# Test case\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": 123, "completion": "def amicable_numbers_sum(limit: int) -> int:\n    def is_amicable(num1, num2):\n        return sum(get_proper_divisors(num1)) == num2 and sum(get_proper_divisors(num2)) == num1\n\n    def get_proper_divisors(number):\n        divisors = [1]\n        for i in range(2, int(number**0.5)+1):\n            if number % i == 0:\n                divisors.extend([i, number//i])\n        return list(set(divisors))\n\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        pair = sum(get_proper_divisors(num))\n        if is_amicable(num, pair) and num != pair:\n            amicable_sum += num\n\n    return amicable_sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": 125, "completion": "def find_length(string: str) -> int:\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    seen = {0: -1}\n    for i, char in enumerate(string):\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = count_1 - count_0\n        if diff in seen:\n            max_diff = max(max_diff, i - seen[diff])\n        else:\n            seen[diff] = i\n    return max_diff"}
{"task_id": 126, "completion": "def sum(a: int, b: int) -> int:\n    return sum(i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0)"}
{"task_id": 127, "completion": "def multiply_int(x: int, y: int) -> int:\n    return x * y\n\nassert multiply_int(10, 20) == 200"}
{"task_id": 128, "completion": "def long_words(n: int, str: str) -> List[str]:\n    return [word for word in str.split() if len(word) > n]"}
{"task_id": 129, "completion": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    target_sum = sum(my_matrix[0])\n    \n    # Calculate row sums\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate column sums\n    col_sums = [sum([row[i] for row in my_matrix]) for i in range(n)]\n    \n    # Calculate diagonal sums\n    diag1_sum = sum([my_matrix[i][i] for i in range(n)])\n    diag2_sum = sum([my_matrix[i][n-1-i] for i in range(n)])\n    \n    return all(sum_list == target_sum for sum_list in row_sums + col_sums + [diag1_sum, diag2_sum])\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": 130, "completion": "from collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return None\n        \n    count_dict = Counter(nums)\n    max_num = max(count_dict, key=count_dict.get)\n    \n    return max_num\n\nassert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2"}
{"task_id": 131, "completion": "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n    while i < j:\n        if str_list[i] in vowels and str_list[j] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        if str_list[i] not in vowels:\n            i += 1\n        if str_list[j] not in vowels:\n            j -= 1\n    return \"\".join(str_list)"}
{"task_id": 132, "completion": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    return ''.join(tup1)"}
{"task_id": 133, "completion": "def sum_negativenum(nums: List[int]) -> int:\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": 135, "completion": "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"}
{"task_id": 138, "completion": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n == 0:\n        return False\n    while n > 0:\n        power = 1\n        while power <= n:\n            power *= 2\n        power //= 2\n        n -= power\n    return n == 0\n\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": 141, "completion": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(arr, k):\n        arr[:k+1] = arr[:k+1][::-1]\n    \n    for end in range(len(nums)-1, 0, -1):\n        max_index = nums.index(max(nums[:end+1]))\n        if max_index != end:\n            flip(nums, max_index)\n            flip(nums, end)\n    \n    return nums\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": 142, "completion": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n        \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n\n# Test case\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3"}
{"task_id": 143, "completion": "def find_lists(Input: List[Any]) -> int:\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n\nassert find_lists([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2"}
{"task_id": 145, "completion": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if len(arr) < 2:\n        return 0\n        \n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    for num in arr:\n        max_val = max(max_val, num)\n        min_val = min(min_val, num)\n        \n    return abs(max_val - min_val)\n\nassert max_Abs_Diff([2, 1, 5, 3]) == 4"}
{"task_id": 160, "completion": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    def extended_gcd(a, b):\n        if b == 0:\n            return 1, 0\n        else:\n            x, y = extended_gcd(b, a % b)\n            return y, x - (a // b) * y\n    \n    def gcd(a, b):\n        return a if b == 0 else gcd(b, a % b)\n    \n    def check():\n        g = gcd(a, b)\n        if g == 0:\n            return None\n        if n % g == 0:\n            x, y = extended_gcd(a, b)\n            return x * (n // g), y * (n // g)\n        return None\n    \n    return check()"}
{"task_id": 161, "completion": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [x for x in list1 if x not in list2]"}
{"task_id": 162, "completion": "def sum_series(n: int) -> int:\n    sum_result = 0\n    for i in range(n // 2 + 1):\n        sum_result += n - 2*i\n    return sum_result\n\nassert sum_series(6) == 12"}
{"task_id": 164, "completion": "def are_equivalent(num1: int, num2: int) -> bool:\n    def sum_divisors(n):\n        return sum(i for i in range(1, n + 1) if n % i == 0)\n    \n    return sum_divisors(num1) == sum_divisors(num2)\n\n# Test case\nassert are_equivalent(36, 57) == False"}
{"task_id": 165, "completion": "def count_char_position(str1: str) -> int:\n    count = 0\n    for i, char in enumerate(str1):\n        if char.isalpha() and ord(char.lower()) - ord('a') == i:\n            count += 1\n    return count\n\nassert count_char_position('xbcefg') == 2"}
{"task_id": 166, "completion": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": 167, "completion": "def next_power_of_2(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n# Test case\nassert next_power_of_2(0) == 1"}
{"task_id": 168, "completion": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": 170, "completion": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n+1])"}
{"task_id": 171, "completion": "def perimeter_pentagon(a: int) -> int:\n    return 5 * a\n\nassert perimeter_pentagon(5) == 25"}
{"task_id": 172, "completion": "def count_occurance(s: str) -> int:\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\nassert count_occurance('letstdlenstdporstd') == 3"}
{"task_id": 222, "completion": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    ref_type = type(test_tuple[0])\n    return all(type(elem) == ref_type for elem in test_tuple)"}
{"task_id": 223, "completion": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    def find_first_occurrence(arr, x):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def find_last_occurrence(arr, x):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if (mid == len(arr) - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif arr[mid] > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n\n    first_occurrence = find_first_occurrence(arr, x)\n    last_occurrence = find_last_occurrence(arr, x)\n\n    if first_occurrence != -1 and last_occurrence != -1:\n        count = last_occurrence - first_occurrence + 1\n        return count > n // 2\n    return False\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": 224, "completion": "def count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1"}
{"task_id": 226, "completion": "def odd_values_string(str: str) -> str:\n    return str[::2]"}
{"task_id": 227, "completion": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, min(b, c))\n\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": 228, "completion": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return (n & mask) == 0"}
{"task_id": 229, "completion": "def re_arrange_array(arr: List[int], n: int) -> List[int]:\n    neg_idx = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_idx], arr[i] = arr[i], arr[neg_idx]\n            neg_idx += 1\n    return arr"}
{"task_id": 230, "completion": "def replace_blank(str1: str, char: str) -> str:\n    return char.join(str1.split())\n\nassert replace_blank('hello people', '@') == 'hello@people'"}
{"task_id": 234, "completion": "def volume_cube(l: int) -> int:\n    return l * l * l"}
{"task_id": 237, "completion": "from collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurrences = defaultdict(int)\n    for tpl in test_list:\n        occurrences[tpl] += 1\n    return dict(occurrences)"}
{"task_id": 238, "completion": "def number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) // 2\n\nassert number_of_substrings('abc') == 6"}
{"task_id": 239, "completion": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = sum(dp[i-1][j//2:j+1])\n    \n    return sum(dp[n])"}
{"task_id": 240, "completion": "def replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1.pop()\n        list1.extend(list2)\n    return list1\n\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": 242, "completion": "def count_charac(str1: str) -> int:\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n# Test case\nassert count_charac('python programming') == 18"}
{"task_id": 244, "completion": "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    return next_int**2\n\nassert next_Perfect_Square(35) == 36"}
{"task_id": 245, "completion": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    increasing = [0] * n\n    decreasing = [0] * n\n    \n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                increasing[i] = max(increasing[i], increasing[j] + arr[i])\n    \n    for i in range(n-1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i])\n    \n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n    \n    return max_sum\n\n# Test case\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": 247, "completion": "def lps(str: str) -> int:\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"}
{"task_id": 249, "completion": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    return [num for num in array_nums1 if num in array_nums2]"}
{"task_id": 250, "completion": "def count_X(tup: List[int], x: int) -> int:\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n\nassert count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0"}
{"task_id": 251, "completion": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result\n\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": 252, "completion": "from typing import Tuple\nimport cmath\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    r = abs(numbers)\n    angle_rad = cmath.phase(numbers)\n    return (r, angle_rad)"}
{"task_id": 253, "completion": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    return len([x for x in list1 if isinstance(x, int)])\n\n# Test case\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": 255, "completion": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    def generate_combinations(current_combination, index, all_combinations):\n        if len(current_combination) == n:\n            all_combinations.append(current_combination.copy())\n            return\n        for i in range(index, len(l)):\n            current_combination.append(l[i])\n            generate_combinations(current_combination, i, all_combinations)\n            current_combination.pop()\n    \n    all_combinations = []\n    generate_combinations([], 0, all_combinations)\n    return all_combinations\n\n# Test case\nassert combinations_colors(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]"}
{"task_id": 256, "completion": "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n\nassert count_Primes_nums(5) == 2"}
{"task_id": 257, "completion": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    return [b, a]\n\n# Test case\nassert swap_numbers(10, 20) == [20, 10]"}
{"task_id": 259, "completion": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    return [[max(a, b) for a, b in zip(sublist1, sublist2)] for sublist1, sublist2 in zip(test_tup1, test_tup2)]"}
{"task_id": 260, "completion": "def newman_prime(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return newman_prime(n-1)**2 - newman_prime(n-2)\n\nassert newman_prime(3) == 7"}
{"task_id": 261, "completion": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(x // y if y != 0 else 0 for x, y in zip(test_tup1, test_tup2))\n\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": 262, "completion": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    return (list1[:L], list1[L:])"}
{"task_id": 264, "completion": "def dog_age(h_age: int) -> int:\n    return 15 if h_age == 1 else 24 if h_age == 2 else 24 + (h_age - 2) * 4"}
{"task_id": 265, "completion": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": 266, "completion": "def lateralsurface_cube(l: int) -> int:\n    return 4 * (l ** 2)"}
{"task_id": 267, "completion": "def square_Sum(n: int) -> int:\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n\nassert square_Sum(2) == 10"}
{"task_id": 268, "completion": "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1\n\nassert find_star_num(3) == 37"}
{"task_id": 269, "completion": "def ascii_value(k: str) -> int:\n    if len(k) != 1:\n        raise ValueError(\"Input must be a single character\")\n    return ord(k)\n\nassert ascii_value('A') == 65"}
{"task_id": 270, "completion": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum(arr[i] for i in range(len(arr)) if arr[i] % 2 == 0 and i % 2 == 0)"}
{"task_id": 271, "completion": "def even_Power_Sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    \n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += (2*i) ** 5\n        \n    return total_sum\n\nassert even_Power_Sum(2) == 1056"}
{"task_id": 272, "completion": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    return [t[-1] for t in test_list]"}
{"task_id": 273, "completion": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    return tuple(t1 - t2 for t1, t2 in zip(test_tup1, test_tup2))"}
{"task_id": 274, "completion": "import math\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    def binomial_coefficient(n, k):\n        return math.comb(n, k)\n    \n    return sum(binomial_coefficient(n, k) for k in range(0, n + 1, 2))\n\n# Test case\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": 277, "completion": "def dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"}
{"task_id": 278, "completion": "def count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    count = 0\n    for item in test_tup:\n        if isinstance(item, int):\n            count += 1\n        elif isinstance(item, tuple):\n            count += item[0] + 1\n    return count"}
{"task_id": 279, "completion": "def is_num_decagonal(n: int) -> int:\n    return n * (7 * n - 5)"}
{"task_id": 280, "completion": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)\n  \nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"}
{"task_id": 281, "completion": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))\n\nassert all_unique([1, 2, 3]) == True"}
{"task_id": 282, "completion": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [x - y for x, y in zip(nums1, nums2)]"}
{"task_id": 283, "completion": "def validate(n: int) -> bool:\n    digit_counts = {}\n    n_str = str(n)\n    for digit in n_str:\n        if digit in digit_counts:\n            digit_counts[digit] += 1\n        else:\n            digit_counts[digit] = 1\n        if digit_counts[digit] > int(digit):\n            return False\n    return True\n\nassert validate(1234) == True"}
{"task_id": 284, "completion": "def check_element(list: List[Any], element: Any) -> bool:\n    return all(item == element for item in list)"}
{"task_id": 285, "completion": "def text_match_two_three(text: str) -> bool:\n    for i in range(len(text) - 3):\n        if text[i] == 'a' and text[i+1:i+3] == 'bb':\n            return True\n        elif text[i] == 'a' and text[i+1:i+4] == 'bbb':\n            return True\n    return False\n\nassert text_match_two_three('ac') == False"}
{"task_id": 286, "completion": "def max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    if not a or n <= 0 or k <= 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(k * n):\n        current_sum = max(a[i % n], current_sum + a[i % n])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"}
{"task_id": 287, "completion": "def square_Sum(n: int) -> int:\n    sum_squares = 0\n    for i in range(1, n + 1):\n        sum_squares += (2*i)**2\n    return sum_squares\n\nassert square_Sum(2) == 20"}
{"task_id": 290, "completion": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n    return (max_len, max_list)"}
{"task_id": 291, "completion": "def count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    dp = [[0, 0] for _ in range(n + 1)]\n    dp[1][0] = k\n    for i in range(2, n + 1):\n        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) * (k - 1)\n        dp[i][1] = dp[i-1][0]\n    return sum(dp[n])\n\nassert count_no_of_ways(2, 4) == 16"}
{"task_id": 292, "completion": "def find(n: int, m: int) -> int:\n    if m == 0:\n        raise ZeroDivisionError(\"Division by zero is not allowed\")\n    return n // m\n\nassert find(10, 3) == 3"}
{"task_id": 293, "completion": "import math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    return math.sqrt(w**2 + h**2)"}
{"task_id": 294, "completion": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    max_value = float('-inf')\n    for element in listval:\n        if isinstance(element, int):\n            max_value = max(max_value, element)\n        elif isinstance(element, str):\n            if element.isdigit():\n                max_value = max(max_value, int(element))\n    return max_value\n\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": 295, "completion": "def sum_div(number: int) -> int:\n    if number <= 0:\n        return 0\n    div_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n\nassert sum_div(8) == 7"}
{"task_id": 296, "completion": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \n    def merge(left, right):\n        inv_count = 0\n        i = j = 0\n        sorted_arr = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                sorted_arr.append(left[i])\n                i += 1\n            else:\n                sorted_arr.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        sorted_arr.extend(left[i:])\n        sorted_arr.extend(right[j:])\n        return sorted_arr, inv_count\n    \n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merged = merge(left, right)\n        return merged, inv_left + inv_right + inv_merged\n\n    _, inv_count = merge_sort(arr)\n    return inv_count\n\n# Test case\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": 297, "completion": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, int):\n            flat_list.append(item)\n        else:\n            flat_list += flatten_list(item)\n    return flat_list"}
{"task_id": 299, "completion": "def max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = {}\n    for name, value in stdata:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    max_aggregate_name = max(aggregates, key=aggregates.get)\n    return max_aggregate_name, aggregates[max_aggregate_name]"}
{"task_id": 304, "completion": "def find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    n = len(arr)\n    for start, end in ranges:\n        index = (index - start + rotations) % (end - start + 1) + start\n    \n    return arr[index]"}
{"task_id": 305, "completion": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for word in words:\n        if len(p_words) == 2:\n            break\n        if word.startswith('P') or word.startswith('p'):\n            p_words.extend(word.split())\n    return tuple(p_words)\n\nassert start_withp(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')"}
{"task_id": 306, "completion": "def max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    for i in range(index+1, k):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index] + a[i])\n    \n    for i in range(index+1, k):\n        for j in range(index, i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    return max(dp)"}
{"task_id": 308, "completion": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if not nums1 or not nums2 or len(nums1) < N or len(nums2) < N or N <= 0:\n        return []\n    \n    products = sorted((a * b for a in nums1 for b in nums2), reverse=True)\n    return products[:N]\n\n# Test the function with the provided test case\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]"}
{"task_id": 309, "completion": "def maximum(a: int, b: int) -> int:\n    return max(a, b)"}
{"task_id": 310, "completion": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    return [char for char in str1]"}
{"task_id": 388, "completion": "def highest_Power_of_2(n: int) -> int:\n    power_of_2 = 1\n    while power_of_2 * 2 <= n:\n        power_of_2 *= 2\n    return power_of_2\n\n# Test case\nassert highest_Power_of_2(10) == 8"}
{"task_id": 389, "completion": "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nassert find_lucas(9) == 76"}
{"task_id": 390, "completion": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]"}
{"task_id": 391, "completion": "def convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(min(len(l1), len(l2), len(l3)) if i < len(l1) and i < len(l2) and i < len(l3)] if isinstance(l1[i], str) and isinstance(l2[i], str) and isinstance(l3[i], int)]"}
{"task_id": 392, "completion": "def get_max_sum(n: int) -> int:\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": 393, "completion": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_len_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_len_list = lst\n    return (max_len, max_len_list)\n\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": 394, "completion": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    return len(set(test_tup)) == len(test_tup)"}
{"task_id": 395, "completion": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n        \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None\n\n# Test case\nassert first_non_repeating_character('abcabc') == None"}
{"task_id": 396, "completion": "def check_char(string: str) -> str:\n    if len(string) < 2:\n        return \"Invalid\"\n    \n    first_char = string[0].lower()\n    last_char = string[-1].lower()\n    \n    if first_char == last_char:\n        return \"Valid\"\n    else:\n        return \"Invalid\""}
{"task_id": 397, "completion": "def median_numbers(a: int, b: int, c: int) -> float:\n    nums = [a, b, c]\n    nums.sort()\n    return nums[1]\n\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": 398, "completion": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    def compute_digit_sum(num):\n        return sum(int(digit) for digit in str(num) if digit.isdigit())\n\n    return sum(compute_digit_sum(num) for num in nums)\n\nassert sum_of_digits([10, 2, 56]) == 14"}
{"task_id": 399, "completion": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(t1 ^ t2 for t1, t2 in zip(test_tup1, test_tup2))\n\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"}
{"task_id": 400, "completion": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    unique_tuples = set(map(frozenset, test_list))\n    return len(unique_tuples)"}
{"task_id": 401, "completion": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    result = []\n    for sublist1, sublist2 in zip(test_tup1, test_tup2):\n        result.append([x + y for x, y in zip(sublist1, sublist2)])\n    return result\n\nassert add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]]"}
{"task_id": 404, "completion": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return a if a < b else b\n\nassert minimum(1, 2) == 1"}
{"task_id": 405, "completion": "def check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False\n\nassert check_tuplex(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r') == True"}
{"task_id": 406, "completion": "def find_Parity(x: int) -> bool:\n    return x % 2 != 0\n\nassert find_Parity(12) == False"}
{"task_id": 407, "completion": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    n = list(str(n))\n    for i in range(len(n)-2, -1, -1):\n        if n[i] < n[i+1]:\n            idx = i + 1\n            for j in range(i+1, len(n)):\n                if n[j] > n[i] and n[j] < n[idx]:\n                    idx = j\n            n[i], n[idx] = n[idx], n[i]\n            n[i+1:] = sorted(n[i+1:])\n            return int(''.join(n))\n    return -1"}
{"task_id": 408, "completion": "from typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pairs, (num1 + num2, [num1, num2]))\n    \n    result = []\n    for _ in range(min(k, len(pairs))):\n        result.append(heapq.heappop(pairs)[1])\n    \n    return result"}
{"task_id": 409, "completion": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        return 0\n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"}
{"task_id": 410, "completion": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    min_value = None\n    for item in listval:\n        if isinstance(item, int) or (isinstance(item, str) and str(item).isdigit()):\n            value = int(item)\n            if min_value is None or value < min_value:\n                min_value = value\n    return min_value\n\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": 411, "completion": "def snake_to_camel(word: str) -> str:\n    return ''.join([w.capitalize() for w in word.split('_')])\nassert snake_to_camel('android_tv') == 'AndroidTv'"}
{"task_id": 412, "completion": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]\n\n# Test case\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": 413, "completion": "def extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    if not list1 or n < 0 or n >= len(list1[0]):\n        return []\n    \n    extracted_elements = []\n    for tup in list1:\n        if n < len(tup):\n            extracted_elements.append(tup[n])\n    \n    return extracted_elements\n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": 414, "completion": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False"}
{"task_id": 415, "completion": "def max_Product(arr):\n    max_num = max(arr)\n    arr.remove(max_num)\n    max_num2 = max(arr)\n    return (max_num, max_num2)"}
{"task_id": 417, "completion": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    common_first_elements = set(Input[0])\n    \n    for lst in Input[1:]:\n        common_first_elements.intersection_update(lst)\n    \n    output = list(common_first_elements)\n    return [output + [item for item in lst if item not in output] for lst in Input if all(elem in lst for elem in output)]"}
{"task_id": 418, "completion": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    return max(lst, key=len)"}
{"task_id": 419, "completion": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    total = sum(round(num) for num in list1)\n    return total * len(list1)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]) == 243"}
{"task_id": 420, "completion": "def cube_Sum(n: int) -> int:\n    sum_result = 0\n    for i in range(1, n+1):\n        sum_result += (2*i) ** 3\n    return sum_result\n\nassert cube_Sum(2) == 72"}
{"task_id": 421, "completion": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    result = \"\"\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, int):\n            elem = str(elem)\n        result += elem\n        if i < len(test_tup) - 1:\n            result += \"-\"\n    return result\n\nassert concatenate_tuple(('ID', 'is', 4, 'UTS')) == 'ID-is-4-UTS'"}
{"task_id": 422, "completion": "def find_Average_Of_Cube(n: int) -> float:\n    return sum(i**3 for i in range(1, n+1)) / n"}
{"task_id": 424, "completion": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    return [string[-1] for string in test_tuple]\n\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']"}
{"task_id": 425, "completion": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": 426, "completion": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_numbers = [num for num in nums if num % 2 != 0]\n    return odd_numbers\n\n# Test case\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": 427, "completion": "def change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day.zfill(2)}-{month.zfill(2)}-{year}'"}
{"task_id": 428, "completion": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n# Test case\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": 429, "completion": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2) )"}
{"task_id": 430, "completion": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return c - (b ** 2 - 1) / (4 * a)"}
{"task_id": 431, "completion": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\nassert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True"}
{"task_id": 432, "completion": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    return (base1 + base2) / 2\n\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": 433, "completion": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n\n# Test case\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": 434, "completion": "def text_match_one(text: str) -> bool:\n    found_a = False\n    for char in text:\n        if char == 'a':\n            found_a = True\n        elif char == 'b' and found_a:\n            return True\n        elif char != 'b':\n            found_a = False\n    return False\n\nassert text_match_one('ac') == False"}
{"task_id": 435, "completion": "def last_Digit(n: int) -> int:\n    return abs(n) % 10\n\nassert last_Digit(123) == 3"}
{"task_id": 436, "completion": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    neg_list = [num for num in list1 if num < 0]\n    return neg_list\n\n# Test case\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": 437, "completion": "def remove_odd(str1: str) -> str:\n    return ''.join([char for index, char in enumerate(str1) if (index + 1) % 2 == 0])"}
{"task_id": 438, "completion": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    return sum((b, a) in test_list for a, b in test_list) // 2"}
{"task_id": 439, "completion": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    combined = ''.join(map(str, L))\n    return int(combined)\n\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": 440, "completion": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverbs = [\"quickly\", \"very\", \"always\", \"often\", \"well\"]\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.rstrip('!') in adverbs:\n            start = text.index(word)\n            return start, start + len(word), word.rstrip('!')\n    return -1, -1, \"\""}
{"task_id": 441, "completion": "def surfacearea_cube(l: int) -> int:\n    return 6 * (l ** 2)\n\nassert surfacearea_cube(5) == 150"}
{"task_id": 442, "completion": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    return round(sum(1 for num in nums if num > 0) / len(nums), 2) if nums else 0.0"}
{"task_id": 443, "completion": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num < max_neg):  # Fixed comparison to find the largest negative number\n            max_neg = num\n    return max_neg\n\nassert largest_neg([1, 2, 3, -4, -6]) == -6"}
{"task_id": 444, "completion": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    return [lst[K:] if K >= 0 else lst[:K] for lst in test_list]"}
{"task_id": 445, "completion": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input lists must have the same length\")\n    return [[test_tup1[i][j] * test_tup2[i][j] for j in range(len(test_tup1[0]))] for i in range(len(test_tup1))]\n\n# Test case\nassert index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]]"}
{"task_id": 446, "completion": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    \n    total_count = sum(count_dict.values())\n    return total_count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3"}
{"task_id": 447, "completion": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num**3 for num in nums]\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": 448, "completion": "def cal_sum(n: int) -> int:\n    p = [3, 0, 2]\n    s = sum(p[:min(n, 3)])\n    for i in range(3, n):\n        p.append(p[-2] + p[-3])\n        s += p[-1]\n    return s if n > 3 else sum(p[:n]) - 3"}
{"task_id": 450, "completion": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    extracted = [s for s in str if len(s) == l]\n    return extracted\n\n# Test case\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": 451, "completion": "def remove_whitespaces(text1: str) -> str:\n    if text1 is None:\n        return \"\"\n    return \"\".join(char for char in text1 if not char.isspace())\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": 452, "completion": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    return max(actual_cost - sale_amount, 0)"}
{"task_id": 453, "completion": "def sumofFactors(n: int) -> int:\n    sum_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_factors += i\n    return sum_factors\n\nassert sumofFactors(18) == 26"}
{"task_id": 454, "completion": "def text_match_wordz(text: str) -> bool:\n    words = text.split()\n    for word in words:\n        if 'z' in word.lower():\n            return True\n    return False\n\nassert text_match_wordz('pythonz.') == True"}
{"task_id": 455, "completion": "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"}
{"task_id": 456, "completion": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"}
{"task_id": 457, "completion": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst or all(not sublst for sublst in lst):\n        return []\n        \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_sublist = sublst\n            \n    return min_sublist\n\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]"}
{"task_id": 458, "completion": "def rectangle_area(l: int, b: int) -> int:\n    return l * b\n\nassert rectangle_area(10, 20) == 200"}
{"task_id": 459, "completion": "def remove_uppercase(str1: str) -> str:\n    result = ''\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            result += str1[i]\n        else:\n            while i < len(str1) and str1[i].isupper():\n                i += 1\n            i -= 1\n        i += 1\n    return result\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": 460, "completion": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst]"}
{"task_id": 461, "completion": "def upper_ctr(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"}
{"task_id": 462, "completion": "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[List[str]]:\n    result = []\n    for i in range(len(list1) + 1):\n        for subset in combinations(list1, i):\n            result.append(list(subset))\n    return result"}
{"task_id": 463, "completion": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        result = max(result, max_prod)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": 464, "completion": "def check_value(dict: Dict[str, int], n: int) -> bool:\n    values = list(dict.values())\n    return all(value == values[0] for value in values)"}
{"task_id": 465, "completion": "def drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    return {k: v for k, v in dict1.items() if v is not None and v != \"\"}"}
{"task_id": 468, "completion": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)"}
{"task_id": 470, "completion": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3], test_tup[3] + test_tup[4])\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": 471, "completion": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": 472, "completion": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    l.sort()\n    return all(l[i] + 1 == l[i + 1] for i in range(len(l) - 1) if l[i] != l[i + 1])"}
{"task_id": 474, "completion": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result\n\nassert replace_char('polygon', 'y', 'l') == 'pollgon'"}
{"task_id": 475, "completion": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)     # Sorting in reverse order to achieve descending order\n\n# Test case\nassert sort_counter({ 'Math': 81, 'Physics': 83, 'Chemistry': 87 }) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": 476, "completion": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\n    min_val = min(nums)\n    max_val = max(nums)\n\n    return min_val + max_val\n\nassert big_sum([1, 2, 3]) == 4"}
{"task_id": 477, "completion": "def is_lower(string: str) -> str:\n    return string.lower()"}
{"task_id": 478, "completion": "def remove_lowercase(str1: str) -> str:\n    result = []\n    current_substring = \"\"\n    \n    for char in str1:\n        if char.isupper() or char == \" \":\n            current_substring += char\n        elif char.islower():\n            if current_substring:\n                result.append(current_substring)\n                current_substring = \"\"\n        else:\n            current_substring += char\n    \n    if current_substring:\n        result.append(current_substring)\n    \n    return \"\".join(result)\n\nassert remove_lowercase('PYTHon') == 'PYTH'"}
{"task_id": 479, "completion": "def first_Digit(n: int) -> int:\n    num_str = str(abs(n))\n    first_digit = int(num_str[0])\n    return first_digit\n\nassert first_Digit(123) == 1"}
{"task_id": 554, "completion": "from typing import List\n\ndef Split(lst: List[int]) -> List[int]:\n    return [num for num in lst if num % 2 != 0]\n\n# Test case\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": 555, "completion": "def difference(n: int) -> int:\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    sum_n = (n * (n + 1)) // 2\n    return cube_sum - sum_n\n\nassert difference(3) == 30"}
{"task_id": 556, "completion": "def find_Odd_Pair(A: List[int], N: int) -> int:\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n\n# Test Case\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": 557, "completion": "def toggle_string(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": 558, "completion": "def digit_distance_nums(n1: int, n2: int) -> int:\n    n1_str = str(n1)\n    n2_str = str(n2)\n    max_len = max(len(n1_str), len(n2_str))\n    \n    total_distance = 0\n    for i in range(max_len):\n        digit_n1 = int(n1_str[i]) if i < len(n1_str) else 0\n        digit_n2 = int(n2_str[i]) if i < len(n2_str) else 0\n        total_distance += abs(digit_n1 - digit_n2)\n    \n    return total_distance\n\n# Test case\nassert digit_distance_nums(1, 2) == 1"}
{"task_id": 559, "completion": "def max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], a[i] + current_sum)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": 560, "completion": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    combined_list = test_tup1 + test_tup2\n    unique_elements = set(combined_list)\n    sorted_union_list = sorted(list(unique_elements))\n    return sorted_union_list\n\nassert union_elements([3, 4, 5, 6], [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10]"}
{"task_id": 562, "completion": "def Find_Max_Length(lst: List[List[int]]) -> int:\n    max_length = 0\n    for sublst in lst:\n        length = len(sublst)\n        if length > max_length:\n            max_length = length\n    return max_length\n\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4"}
{"task_id": 563, "completion": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    extracted_values = []\n    in_quotes = False\n    current_value = \"\"\n\n    for char in text:\n        if char == '\"':\n            if in_quotes:\n                extracted_values.append(current_value)\n                current_value = \"\"\n            in_quotes = not in_quotes\n        elif in_quotes:\n            current_value += char\n\n    return extracted_values\n\n# Test case\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": 564, "completion": "def count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": 565, "completion": "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)\n\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": 566, "completion": "def sum_digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    return sum(int(d) for d in str(n))\n\nassert sum_digits(345) == 12"}
{"task_id": 567, "completion": "def issort_list(list1: List[int]) -> bool:\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True"}
{"task_id": 568, "completion": "from typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    return [{} for _ in range(length)]\n\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": 569, "completion": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    if not all(isinstance(sublist, list) and all(isinstance(item, str) for item in sublist) for sublist in list1):\n        return []\n    \n    for sublist in list1:\n        sublist.sort()\n\n    return list1\n\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": 572, "completion": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    return list(set([num for num in nums if nums.count(num) == 1]))"}
{"task_id": 573, "completion": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set()\n    result = 1\n    for num in list_data:\n        if num not in unique_numbers:\n            result *= num\n            unique_numbers.add(num)\n    return result\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": 574, "completion": "import math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    return 2 * math.pi * r * (r + h)"}
{"task_id": 576, "completion": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    n = len(A)\n    m = len(B)\n    \n    if n == 0:\n        return True\n    \n    if m == 0:\n        return False\n    \n    for i in range(m - n + 1):\n        if B[i:i+n] == A:\n            return True\n    \n    return False\n\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False"}
{"task_id": 577, "completion": "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result = (result * i) % 10\n        return result\n\nassert last_Digit_Factorial(4) == 4"}
{"task_id": 578, "completion": "def interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    if len(list1) != len(list2) or len(list1) != len(list3) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.extend([list1[i], list2[i], list3[i]])\n    \n    return interleaved\n\nassert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": 579, "completion": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))"}
{"task_id": 580, "completion": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple) -> Any:\n    result = []\n    \n    for item in test_tuple:\n        if isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, tuple):\n            nested_result = extract_even(item)\n            if nested_result:\n                result.append(nested_result)\n    \n    return tuple(result) if result else None"}
{"task_id": 581, "completion": "def surface_Area(b: int, s: int) -> int:\n    perimeter_base = 4 * b\n    lateral_surface_area = 0.5 * perimeter_base * s\n    base_area = b * b\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area\n\n# Test case\nassert surface_Area(3, 4) == 33"}
{"task_id": 583, "completion": "def catalan_number(num: int) -> int:\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res\n\n# Test case\nassert catalan_number(10) == 16796"}
{"task_id": 584, "completion": "def find_adverbs(text: str) -> str:\n    words = text.split()\n    for idx, word in enumerate(words):\n        if word.endswith('ly') and not word in ['only', 'family']:\n            return f\"{text.find(word)}-{text.find(word)+len(word)}: {word}\"\n    return \"No adverb ending with 'ly' found.\""}
{"task_id": 585, "completion": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"}
{"task_id": 586, "completion": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    if not l:\n        return []\n    \n    n = n % len(l)\n    return l[n:] + l[:n]"}
{"task_id": 587, "completion": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    return tuple(listx)\n\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": 588, "completion": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n\nassert big_diff([1, 2, 3, 4]) == 3"}
{"task_id": 589, "completion": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    x = int(a**0.5)\n    while x*x <= b:\n        if x*x >= a:\n            result.append(x*x)\n        x += 1\n    return result"}
{"task_id": 591, "completion": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": 592, "completion": "import math\n\ndef sum_Of_product(n):\n    total_sum = 0\n    for i in range(n+1):\n        for r in range(i+1):\n            coefficient1 = math.comb(i, r)\n            if r != i:\n                coefficient2 = math.comb(i, r+1)\n                total_sum += coefficient1 * coefficient2\n    return total_sum"}
{"task_id": 593, "completion": "def removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    modified_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(modified_octets)\n\nassert removezero_ip('216.08.094.196') == '216.8.94.196'"}
{"task_id": 594, "completion": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even - odd\n\n# Test case\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3"}
{"task_id": 595, "completion": "def min_Swaps(str1: str, str2: str) -> Any:\n    return sum(bit1 != bit2 for bit1, bit2 in zip(str1, str2)) // 2\n\nassert min_Swaps('1101', '1110') == 1"}
{"task_id": 597, "completion": "def find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": 598, "completion": "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    total_digits = len(num_str)\n    armstrong_sum = sum(int(digit) ** total_digits for digit in num_str)\n    return armstrong_sum == number\n\nassert armstrong_number(153) == True"}
{"task_id": 599, "completion": "def sum_average(number: int) -> Tuple[int, float]:\n    sum_val = number * (number + 1) // 2\n    average = sum_val / number\n    return sum_val, average\n\nassert sum_average(10) == (55, 5.5)"}
{"task_id": 600, "completion": "def is_Even(n: int) -> bool:\n    return n % 2 == 0"}
{"task_id": 602, "completion": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None\n\nassert first_repeated_char('abcabc') == 'a'"}
{"task_id": 603, "completion": ""}
{"task_id": 604, "completion": "def reverse_words(s: str) -> str:\n    if not s:\n        return s\n    # Split the input string into words and reverse their order\n    words = s.split()\n    words.reverse()\n    # Join the reversed words back into a single string\n    return ' '.join(words)"}
{"task_id": 605, "completion": "import math\n\ndef prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test case\nassert prime_num(13) == True"}
{"task_id": 606, "completion": "import math\n\ndef radian_degree(degree: int) -> float:\n    return degree * (math.pi / 180)"}
{"task_id": 607, "completion": "import re\nfrom typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    match = re.search(pattern, text)\n    return match.group(), match.start(), match.end()\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": 608, "completion": "from math import comb\n\ndef bell_Number(n: int) -> int:\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += comb(i - 1, j) * bell[j]\n\n    return bell[n]\n    \nassert bell_Number(2) == 2"}
{"task_id": 610, "completion": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    return list1[:L] + list1[L+1:] if 0 <= L < len(list1) else list1"}
{"task_id": 611, "completion": "def max_of_nth(test_list: List[List[int]], N: int) -> int:\n    nth_elements = [row[N] for row in test_list if N < len(row)]\n    return max(nth_elements) if nth_elements else float('-inf')"}
{"task_id": 612, "completion": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n\n# Test case\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": 614, "completion": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    cumulative_sum = 0\n    for inner_list in test_list:\n        for num in inner_list:\n            cumulative_sum += num\n    return cumulative_sum\n\nassert cummulative_sum([[1, 3], [5, 6, 7], [2, 6]]) == 30"}
{"task_id": 615, "completion": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    return [sum(sublist) / len(sublist) if sublist else 0 for sublist in nums]"}
{"task_id": 616, "completion": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"}
{"task_id": 617, "completion": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    x, y = steps\n    if d < 0:\n        return float('inf')\n    if d == 0:\n        return 0\n    jumps = [float('inf')] * (d + 1)\n    jumps[0] = 0\n    for i in range(1, d + 1):\n        jumps[i] = min([jumps[i - j * x] if i - j * x >= 0 else float('inf') for j in range(1, (d // x) + 1)]) + 1\n    return jumps[d] if jumps[d] != float('inf') else float('inf')"}
{"task_id": 618, "completion": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            result.append(float('nan'))\n        else:\n            result.append(float(num1) / float(num2))\n    \n    return result\n\n# Test case\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"}
{"task_id": 619, "completion": "def move_num(test_str: str) -> str:\n    num_chars = []\n    non_num_chars = []\n    \n    for char in test_str:\n        if char.isnumeric():\n            num_chars.append(char)\n        else:\n            non_num_chars.append(char)\n    \n    return ''.join(non_num_chars + num_chars)"}
{"task_id": 622, "completion": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    arr = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    if i < n:\n        arr.extend(arr1[i:])\n    if j < n:\n        arr.extend(arr2[j:])\n    \n    if len(arr) % 2 == 0:\n        return (arr[n-1] + arr[n]) / 2.0\n    else:\n        return arr[n]\n\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": 623, "completion": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]\n\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": 624, "completion": "def is_upper(string: str) -> str:\n    return string.upper()"}
{"task_id": 625, "completion": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) <= 1:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n# Test case\nassert swap_List([1, 2, 3]) == [3, 2, 1]"}
{"task_id": 626, "completion": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    if r <= 0:\n        return None\n    base = 2 * r\n    height = r\n    return 0.5 * base * height\n\nassert triangle_area(-1) == None"}
{"task_id": 627, "completion": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    if 1 not in array:\n        return 1\n    missing_num = next((x for x in range(1, len(array)+1) if x not in array), None)\n    return missing_num if missing_num is not None else len(array) + 1\n\nassert find_First_Missing([0, 1, 2, 3]) == 4"}
{"task_id": 628, "completion": "def replace_spaces(string: str) -> str:\n    return '%20'.join(string.split())\n\nassert replace_spaces('My Name is Dawood') == 'My%20Name%20is%20Dawood'"}
{"task_id": 629, "completion": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\n# Test case\nassert Split([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": 630, "completion": "def get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    return [[x+i, y+j] for i in range(-1, 2) for j in range(-1, 2] if i != 0 or j != 0]"}
{"task_id": 631, "completion": "def replace_spaces(text: str) -> str:\n    if not isinstance(text, str):\n        return \"Invalid input\"\n    \n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    \n    return result\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": 632, "completion": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    zero_list = [num for num in num_list if num == 0]\n    non_zero_list = [num for num in num_list if num != 0]\n    return non_zero_list + zero_list\n\nassert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]"}
{"task_id": 633, "completion": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47"}
{"task_id": 635, "completion": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def build_max_heap(arr):\n        n = len(arr)\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n    n = len(iterable)\n    build_max_heap(iterable)\n    for i in range(n - 1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": 637, "completion": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount"}
{"task_id": 638, "completion": "def wind_chill(v: int, t: int) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16))"}
{"task_id": 639, "completion": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum(len(name) for name in sample_names if not name[0].islower())"}
{"task_id": 640, "completion": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    result = \"\"\n    for item in items:\n        temp = \"\"\n        skip = 0\n        for char in item:\n            if char == '(':\n                skip += 1\n            elif char == ')' and skip > 0:\n                skip -= 1\n            elif skip == 0:\n                temp += char\n        result += temp\n    return result"}
{"task_id": 641, "completion": "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2\n\nassert is_nonagonal(10) == 325"}
{"task_id": 643, "completion": "def text_match_wordz_middle(text: str) -> bool:\n    words = text.split()\n    for word in words:\n        if 'z' in word and word.index('z') > 0 and word.index('z') < len(word) - 1:\n            return True\n    return False\n\n# Test case\nassert text_match_wordz_middle('pythonzabc.') == True"}
{"task_id": 644, "completion": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    left, right = 0, k - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input\n\n# Test case\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": 720, "completion": "def add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]:\n    new_dict = {**test_dict}\n    return test_tup + (new_dict,)"}
{"task_id": 721, "completion": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0.0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n-1][n-1] / ((2*n)-1)\n\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": 722, "completion": "def filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}"}
{"task_id": 723, "completion": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n# Test the function with the provided test case\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4"}
{"task_id": 724, "completion": "def power_base_sum(base: int, power: int) -> int:\n    num = base ** power\n    return sum(int(digit) for digit in str(num))\n\nassert power_base_sum(2, 100) == 115"}
{"task_id": 725, "completion": "def extract_quotation(text1: str) -> List[Any]:\n    extracted_values = []\n    in_quotes = False\n    current_value = \"\"\n\n    for char in text1:\n        if char == '\"':\n            if in_quotes:\n                in_quotes = False\n                extracted_values.append(current_value)\n                current_value = \"\"\n            else:\n                in_quotes = True\n        elif in_quotes:\n            current_value += char\n\n    return extracted_values\n\n# Test case\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": 726, "completion": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    return [test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)]"}
{"task_id": 728, "completion": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    return [a + b for a, b in zip(lst1, lst2)]"}
{"task_id": 730, "completion": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result\n\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": 731, "completion": "import math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l\n\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": 732, "completion": "def replace_specialchar(text: str) -> str:\n    return ''.join(':' if c in [' ', ',', '.'] else c for c in text)"}
{"task_id": 733, "completion": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": 734, "completion": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    mod = 1000000007\n    result = 0\n    for i in range(len(arr)):\n        result += (arr[i] * (i + 1) * (len(arr) - i) % mod)\n    return result % mod\n\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20"}
{"task_id": 735, "completion": "def toggle_middle_bits(n: int) -> int:\n    mask = (1 << (n.bit_length() - 2)) - 1\n    return n ^ (mask << 1)"}
{"task_id": 736, "completion": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    low = 0\n    high = len(a)\n    \n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return low\n\nassert left_insertion([1, 2, 4, 5], 6) == 4"}
{"task_id": 737, "completion": "import re\n\ndef check_str(string: str) -> bool:\n    return bool(re.match(r'^[aeiouAEIOU]', string))\n\nassert check_str('annie') == True"}
{"task_id": 738, "completion": "def geometric_sum(n: int) -> float:\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + geometric_sum(n - 1)"}
{"task_id": 739, "completion": "from math import log10, ceil\n\ndef find_Index(n: int) -> int:\n    digits = n - 1\n    index = 1\n    triangular = 1\n    \n    while int(log10(triangular)) < digits:\n        index += 1\n        triangular += index\n\n    return index\n\nassert find_Index(2) == 4"}
{"task_id": 740, "completion": "def tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    if len(test_tup) % 2 != 0:\n        raise ValueError(\"Input tuple length must be even.\")\n    \n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i + 1]\n    \n    return result_dict\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == { 1: 5, 7: 10, 13: 5 }"}
{"task_id": 741, "completion": "def all_Characters_Same(s: str) -> bool:\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n\n# Test case\nassert all_Characters_Same('python') == False"}
{"task_id": 742, "completion": "def area_tetrahedron(side: int) -> float:\n    return (3**0.5) * side**2\n\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": 743, "completion": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    if not list or m < 0 or m >= len(list):\n        return list\n\n    m = len(list) - m\n    result = []\n    for i in range(m, m + len(list)):\n        result.append(list[i % len(list)])\n\n    return result\n\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": 744, "completion": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    return any(elem is None for elem in test_tup)"}
{"task_id": 745, "completion": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    return [num for num in range(startnum, endnum+1) if all(int(digit) != 0 and num % int(digit) == 0 for digit in str(num))]\n\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": 746, "completion": "from typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    if a > 360:\n        return None\n    return (math.pi * r ** 2 * a) / 360\n\nassert sector_area(4, 45) == 6.283185307179586"}
{"task_id": 747, "completion": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[[0 for _ in range(p + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n    \n    return L[m][n][p]"}
{"task_id": 748, "completion": "def capital_words_spaces(str1: str) -> str:\n    result = []\n    for i, char in enumerate(str1):\n        if char.isupper() and i > 0 and str1[i-1].islower():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)"}
{"task_id": 749, "completion": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))"}
{"task_id": 750, "completion": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": 751, "completion": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    for i in range(len(arr)//2 - 1, -1, -1):\n        if 2*i + 1 < len(arr) and arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < len(arr) and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"task_id": 752, "completion": "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, 2*a + b\n        return b\n\nassert jacobsthal_num(5) == 11"}
{"task_id": 753, "completion": "def min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]"}
{"task_id": 754, "completion": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]"}
{"task_id": 755, "completion": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if not numbers or len(set(numbers)) < 2:\n        return None\n    sorted_numbers = sorted(set(numbers))\n    return sorted_numbers[1]"}
{"task_id": 756, "completion": "import re\n\ndef text_match_zero_one(text: str) -> bool:\n    pattern = re.compile(r'ab+')\n    return bool(pattern.search(text))"}
{"task_id": 757, "completion": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\nassert count_reverse_pairs(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2"}
{"task_id": 759, "completion": "def is_decimal(num: str) -> bool:\n    num = num.strip()\n    if not num:\n        return False\n    try:\n        float_num = float(num)\n        return num.count('.') == 1 and len(num.split('.')[-1]) == 2\n    except ValueError:\n        return False\n\nassert is_decimal('123.11') == True"}
{"task_id": 760, "completion": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        return False\n    \n    if len(arr) <= 1:\n        return True\n    \n    return len(set(arr)) == 1\n\nassert unique_Element([1, 1, 1]) == True"}
{"task_id": 762, "completion": "def check_monthnumber_number(monthnum3: int) -> bool:\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": 763, "completion": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    return min_diff\n\nassert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1"}
{"task_id": 764, "completion": "def number_ctr(str: str) -> int:\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\nassert number_ctr('program2bedone') == 1"}
{"task_id": 765, "completion": "def is_polite(n: int) -> int:\n    def is_power_of_2(num: int) -> bool:\n        return (num & (num - 1)) == 0\n\n    result, current = 1, 2\n    while n > 0:\n        if is_power_of_2(current):\n            result = current\n            n -= 1\n        current += 1\n\n    return result"}
{"task_id": 766, "completion": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    pairs = [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n    return pairs"}
{"task_id": 767, "completion": "from collections import defaultdict\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    num_count = defaultdict(int)\n    for num in arr:\n        diff = sum - num\n        count += num_count[diff]\n        num_count[num] += 1\n    return count\n\nassert get_pairs_count([1, 1, 1, 1], 2) == 6"}
{"task_id": 769, "completion": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": 770, "completion": "def odd_num_sum(n: int) -> int:\n    return sum([(2*i - 1) ** 4 for i in range(1, n+1)])"}
{"task_id": 771, "completion": "def check_expression(exp: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack\n\nassert check_expression('{()}[{}]') == True"}
{"task_id": 772, "completion": "def remove_length(test_str: str, K: int) -> str:\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)"}
{"task_id": 773, "completion": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    if not text or not pattern:\n        return None\n\n    start = text.find(pattern)\n    end = start + len(pattern)\n\n    if start == -1:\n        return None\n    else:\n        return pattern, start, end"}
{"task_id": 775, "completion": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    if not nums:\n        return False\n    \n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    \n    return True\n\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True"}
{"task_id": 776, "completion": "def count_vowels(test_str: str) -> int:\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and (test_str[i - 1] in vowels or test_str[i + 1] in vowels or test_str[i - 1].lower() in vowels or test_str[i + 1].lower() in vowels):\n            count += 1\n    return count"}
{"task_id": 777, "completion": "from collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    count_dict = Counter(arr)\n    non_repeated_elements = [num for num in count_dict if count_dict[num] == 1]\n    return sum(non_repeated_elements)"}
{"task_id": 778, "completion": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    result = []\n    sublist = []\n    \n    for i, item in enumerate(list1):\n        if i == 0 or item != list1[i-1]:\n            if sublist:\n                result.append(sublist)\n            sublist = [item]\n        else:\n            sublist.append(item)\n    \n    if sublist:\n        result.append(sublist)\n    \n    return result\n\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": 780, "completion": "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for a, b in combinations(test_list, 2):\n        result.append((a[0] + b[0], a[1] + b[1]))\n    return result"}
{"task_id": 781, "completion": "def count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10) == True"}
{"task_id": 782, "completion": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    res = 0\n    n = len(arr)\n    for i in range(n):\n        res += (((i + 1) * (n - i) + 1) // 2) * arr[i]\n    return res\n\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": 783, "completion": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return [h, s, v]\n\n# Test case\nassert rgb_to_hsv(255, 255, 255) == [0.0, 0.0, 100.0]"}
{"task_id": 784, "completion": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even * odd if even is not None and odd is not None else 0\n\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"}
{"task_id": 785, "completion": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    str_values = test_str.strip('()').split(',')\n    int_values = tuple(map(int, str_values))\n    return int_values\n\nassert tuple_str_int('(7, 8, 9)') == (7, 8, 9)"}
{"task_id": 786, "completion": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    low = 0\n    high = len(a)\n    \n    while low < high:\n        mid = low + (high - low) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return low\n\nassert right_insertion([1, 2, 4, 5], 6) == 4"}
{"task_id": 787, "completion": "def text_match_three(text: str) -> bool:\n    if not isinstance(text, str):\n        return False\n    \n    for i in range(len(text) - 3):\n        if text[i] == 'a' and text[i+1:i+4] == 'bbb':\n            return True\n    \n    return False\n\nassert text_match_three('ac') == False"}
{"task_id": 788, "completion": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    return (test_list[0], test_list[1], test_str)"}
{"task_id": 790, "completion": "def even_position(nums: List[int]) -> bool:\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))"}
{"task_id": 791, "completion": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    return tuple(item for item in test_tup if not isinstance(item, tuple))"}
{"task_id": 792, "completion": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n# Test the function with the given test case\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": 793, "completion": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n\n# Test case\nassert last([1, 2, 3], 1) == 0"}
{"task_id": 794, "completion": "import re\n\ndef text_starta_endb(text: str) -> bool:\n    return bool(re.search(r'a.*b$', text))"}
{"task_id": 796, "completion": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    return sum(dict.values())\n\nassert return_sum({ 'a': 100, 'b': 200, 'c': 300 }) == 600"}
{"task_id": 797, "completion": "def sum_in_range(l: int, r: int) -> int:\n    return sum(i for i in range(l, r+1) if i % 2 != 0)"}
{"task_id": 798, "completion": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    return total_sum\n\n# Test case\nassert _sum([1, 2, 3]) == 6"}
{"task_id": 799, "completion": "def left_rotate(n: int, d: int) -> int:\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n\nassert left_rotate(16, 2) == 64"}
{"task_id": 800, "completion": "def remove_all_spaces(text: str) -> str:\n    return ''.join(char for char in text if not char.isspace())"}
{"task_id": 801, "completion": "def test_three_equal(x: int, y: int, z: int) -> int:\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n\nassert test_three_equal(1, 1, 1) == 3"}
{"task_id": 802, "completion": "def count_rotation(arr):\n    for i in range(len(arr)):\n        if arr[i] < arr[i-1]: \n            return i\n    return 0"}
{"task_id": 803, "completion": "def is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5)\n    return sqrt_n * sqrt_n == n\n\nassert is_perfect_square(10) == False"}
{"task_id": 804, "completion": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1, 2, 3]) is True"}
{"task_id": 805, "completion": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    return max_list\n\n# Test case\nassert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]"}
{"task_id": 806, "completion": "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n        \n    return max_run\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": 807, "completion": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return -1\n\nassert first_odd([1, 3, 5]) == 1"}
{"task_id": 808, "completion": "def check_K(test_tup: List[int], K: int) -> bool:\n    return K in test_tup\n\nassert check_K([10, 4, 5, 6, 8], 6) == True"}
{"task_id": 809, "completion": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    return all(tup2 < tup1 for tup1, tup2 in zip(test_tup1, test_tup2))\n\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
