{"task_id": 3554, "completion": "from collections import Counter\n\ndef get_score(dice):\n    count = Counter(dice)\n    score = 0\n    \n    if set(dice) == {1, 2, 3, 4, 5, 6}:\n        return 1000\n    \n    for i in range(1, 7):\n        if count[i] == 6:\n            return count[i] * 200\n    \n    for i in range(1, 7):\n        if count[i] == 5:\n            return count[i] * 300\n    \n    for i in range(1, 7):\n        if count[i] == 4:\n            return count[i] * 400\n    \n    for i in range(1, 7):\n        if count[i] == 3:\n            score += count[i] * 100\n    \n    pairs = 0\n    for i in range(1, 7):\n        if count[i] == 2:\n            pairs += 1\n            score += count[i] * 50\n    if pairs == 3:\n        return 750\n    \n    for i in range(1, 7):\n        if count[i] == 1 and i != 1 and i != 5:\n            return 0\n    \n    if count[1] < 3:\n        return score\n    else:\n        return score + (count[1] - 3) * 100\n    \n    return \"Zonk\""}
{"task_id": 1, "completion": "def drop_cap(str_):\n    words = str_.split()\n    result = []\n    for word in words:\n        if len(word.strip()) > 2:\n            result.append(word.capitalize())\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": 4561, "completion": "def solve(st):\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    def get_possible_modifications(char):\n        if char == 'a':\n            return ['b']\n        elif char == 'z':\n            return ['y']\n        else:\n            return [chr(ord(char) - 1), chr(ord(char) + 1)]\n\n    for i in range(len(st)):\n        possible_modified_strings = []\n        for char in st:\n            possible_modified_chars = get_possible_modifications(char)\n            modified_strings = []\n            for c in possible_modified_chars:\n                modified_strings.append(st[:i] + c + st[i+1:])\n            possible_modified_strings.append(modified_strings)\n\n        for modification in product(*possible_modified_strings):\n            if any(is_palindrome(mod) for mod in modification):\n                return True\n    return False"}
{"task_id": 4468, "completion": "def simplify(n):\n    return '+'.join([str(int(digit) * 10 ** (len(str(n)) - i - 1)) for i, digit in enumerate(str(n)) if digit != '0'])"}
{"task_id": 3613, "completion": "def is_substitution_cipher(string1, string2):\n    return sorted(string1) == sorted(string2)"}
{"task_id": 4465, "completion": "def super_size(n):\n    if n < 10:\n        return n\n    else:\n        return int(''.join(sorted(str(n), reverse=True)))"}
{"task_id": 3045, "completion": "def elevator(left, right, call):\n    return \"left\" if abs(left - call) < abs(right - call) else \"right\" if abs(left - call) > abs(right - call) else \"right\""}
{"task_id": 4276, "completion": "def solution(n):\n    integer_part = int(n)\n    decimal_part = n - integer_part\n    \n    if decimal_part < 0.25:\n        return integer_part\n    elif decimal_part < 0.75:\n        return integer_part + 0.5\n    else:\n        return int(n) + 1"}
{"task_id": 2882, "completion": "def cumulative_triangle(n):\n    total_numbers = n * (n + 1) // 2\n    starting_number = (n - 1) * n // 2 + 1\n    return sum(range(starting_number, starting_number + n))"}
{"task_id": 4440, "completion": "def validate_pin(pin):\n    return len(pin) in (4, 6) and pin.isdigit()"}
{"task_id": 2771, "completion": "def hofstadter_Q(n):\n    arr = [1, 1]\n    for i in range(2, n):\n        arr.append(arr[i - arr[i - 1]] + arr[i - arr[i - 2]])\n    return arr[-1]"}
{"task_id": 4335, "completion": "def anagrams(word, words):\n    return [w for w in words if sorted(w) == sorted(word)]"}
{"task_id": 3512, "completion": "def last_fib_digit(n):\n    fib_values = [0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1]\n    return fib_values[n % 60]"}
{"task_id": 3435, "completion": "def alphabet_war(fight):\n    left_power = 0\n    right_power = 0\n    fight = fight.replace('*', '_')\n    \n    conversion_dict = {'w': 4, 'p': 3, 'b': 2, 's': 1, 'm': 4, 'q': 3, 'd': 2, 'z': 1}\n    \n    for i in range(len(fight)):\n        char = fight[i]\n        if char in conversion_dict:\n            if char in ['w', 'p', 'b', 's']:\n                left_power += conversion_dict[char]\n            else:\n                right_power += conversion_dict[char]\n    \n    if left_power > right_power:\n        return 'Left side wins!'\n    elif right_power > left_power:\n        return 'Right side wins!'\n    else:\n        return \"Let's fight again!\""}
{"task_id": 3387, "completion": "def nameInStr(s, name):\n    name = name.lower()\n    name_index = 0\n    for char in s.lower():\n        if name_index < len(name) and char == name[name_index]:\n            name_index += 1\n    return name_index == len(name)"}
{"task_id": 4024, "completion": "def special_number(number):\n    for digit in str(number):\n        if int(digit) not in range(6):\n            return \"NOT!!\"\n    return \"Special!!\""}
{"task_id": 3478, "completion": "def battle(player1, player2):\n    player1_power = []\n    player1_toughness = []\n    player2_power = []\n    player2_toughness = []\n    \n    for p1, p2 in zip(player1, player2):\n        if p1[0] >= p2[1]:\n            player1_power.append(p1[0])\n            player1_toughness.append(p1[1])\n        \n        if p2[0] >= p1[1]:\n            player2_power.append(p2[0])\n            player2_toughness.append(p2[1])\n    \n    return {\n        'player1': [sum(player1_power), sum(player1_toughness)],\n        'player2': [sum(player2_power), sum(player2_toughness)]\n    }"}
{"task_id": 3766, "completion": "import math\n\ndef getAllPrimeFactors(n):\n    if not isinstance(n, int) or n <= 0:\n        return []\n\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors"}
{"task_id": 3292, "completion": "def calc(x):\n    total1 = sum(int(digit) for digit in str(sum(ord(char) for char in x)))\n    total2 = int(str(total1).replace('7', '1'))\n    return [sum(int(digit) for digit in str(total1)) - sum(int(digit) for digit in str(total2))]"}
{"task_id": 2886, "completion": "def find(s):\n    result = \"\"\n    current = \"\"\n    max_len = 0\n    \n    for i in range(len(s) - 1):\n        if (s[i] == \"!\" and s[i + 1] == \"?\") or (s[i] == \"?\" and s[i + 1] == \"!\"):\n            current += s[i] + s[i + 1]\n            if len(current) > max_len:\n                max_len = len(current)\n                result = current\n        else:\n            current = \"\"\n    \n    return result"}
{"task_id": 4515, "completion": "def diff(arr):\n    if not arr:\n        return False\n    \n    max_diff = 0\n    max_diff_pair = ''\n    \n    for pair in arr:\n        num1, num2 = map(int, pair.split('-'))\n        diff = abs(num1 - num2)\n        \n        if diff > max_diff:\n            max_diff = diff\n            max_diff_pair = pair\n            \n    if max_diff == 0:\n        return False\n    else:\n        return max_diff_pair"}
{"task_id": 3068, "completion": "def vowel_back(st):\n    exceptions = {'c': 1, 'o': 1, 'd': 3, 'e': 4}\n    vowels = 'aeiou'\n    result = ''\n    for char in st:\n        if char in exceptions:\n            move = -exceptions[char]\n        elif char in vowels and char != 'y':\n            move = -5\n        else:\n            move = 9\n\n        new_char = chr((ord(char) + move - ord('a')) % 26 + ord('a'))\n        if new_char in exceptions and move > 0:\n            result += char\n        else:\n            result += new_char\n\n    return result"}
{"task_id": 4214, "completion": "def spin_solve(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if (len(word) > 6) or (word.lower().count('t') >= 2):\n            result.append(word[::-1])\n        elif (len(word) == 2) or (word.endswith(',') and len(word) > 1):\n            result.append(word.upper())\n        elif len(word) == 1:\n            result.append('0')\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": 3884, "completion": "def gymSlang(phrase):\n    phrase = re.sub(r'\\b(?i)probably\\b', 'prolly', phrase)\n    phrase = re.sub(r'\\b(?i)i am\\b', \"i'm\", phrase)\n    phrase = re.sub(r'\\b(?i)instagram\\b', 'insta', phrase)\n    phrase = re.sub(r'\\b(?i)do not\\b', \"don't\", phrase)\n    phrase = re.sub(r'\\b(?i)going to\\b', 'gonna', phrase)\n    phrase = re.sub(r'\\b(?i)combination\\b', 'combo', phrase)\n    \n    return phrase"}
{"task_id": 3732, "completion": "def is_madhav_array(arr):\n    if len(arr) < 3:\n        return False\n    n = 1\n    expected_sum = 0\n    while n * (n + 1) // 2 < len(arr):\n        expected_sum = sum(arr[1:(n * (n + 1) // 2) + 1])\n        if sum(arr[:n]) != expected_sum:\n            return False\n        n += 1\n    return len(arr) == (n * (n + 1) // 2)"}
{"task_id": 3569, "completion": "def is_lucky(ticket):\n    if len(ticket) != 6:\n        return False\n    digits = [int(digit) for digit in ticket]\n    return sum(digits[:3]) == sum(digits[3:])"}
{"task_id": 2755, "completion": "def multiple_of_index(arr):\n    return [arr[i] for i in range(1, len(arr)) if arr[i] % i == 0]"}
{"task_id": 4168, "completion": "def string_hash(input_str):\n    a = sum(ord(char) for char in input_str)\n    b = sum(ord(input_str[i]) - ord(input_str[i - 1]) if i > 0 else 0 for i in range(len(input_str)))\n    c = (a | b) & ~(a << 2)\n    d = c ^ (32 * (input_str.count(' ') + 1))\n    return d"}
{"task_id": 4391, "completion": "def yellow_be_gone(color):\n    yellow_shades = {\n        \"gold\": \"ForestGreen\",\n        \"khaki\": \"LimeGreen\",\n        \"lemonchiffon\": \"PaleGreen\",\n        \"lightgoldenrodyellow\": \"SpringGreen\",\n        \"lightyellow\": \"MintCream\",\n        \"palegoldenrod\": \"LightGreen\",\n        \"yellow\": \"Lime\"\n    }\n\n    if color.lower() in yellow_shades:\n        return yellow_shades[color.lower()]\n\n    if len(color) == 7 and color[0] == '#':\n        r, g, b = int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)\n        \n        if r > b and g > b:\n            r, g, b = sorted([r, g, b])\n            return f\"#{r:02X}{g:02X}{b:02X}\"\n\n    return color"}
{"task_id": 4344, "completion": "def rectangles(n, m):\n    return (n * (n + 1) // 2) * (m * (m + 1) // 2)"}
{"task_id": 3856, "completion": "def solve(a, b):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    dominant_prime_sum = 0\n    for num in range(a, b + 1):\n        if is_prime(num):\n            position = num - 1\n            if is_prime(position):\n                dominant_prime_sum += num\n    \n    return dominant_prime_sum"}
{"task_id": 3698, "completion": "def tiyFizzBuzz(string):\n    replaced_string = \"\"\n    for char in string:\n        if char.isupper() and char in \"BCDFGHJKLMNPQRSTVWXYZ\":\n            replaced_string += \"Iron\"\n        elif char.islower() and char in \"aeiou\":\n            replaced_string += \"Yard\"\n        elif char.isupper() and char in \"AEIOU\":\n            replaced_string += \"Iron Yard\"\n        else:\n            replaced_string += char\n    return replaced_string"}
{"task_id": 4268, "completion": "def next_num(n):\n    def is_polydivisible(num):\n        num_str = str(num)\n        for i in range(1, len(num_str) + 1):\n            if int(num_str[:i]) % i != 0:\n                return False\n        return True\n\n    next_num = n + 1\n    while True:\n        if is_polydivisible(next_num):\n            return next_num\n        next_num += 1"}
{"task_id": 2704, "completion": "def almost_increasing_sequence(sequence):\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            without_i = sequence[:i] + sequence[i + 1:]\n            without_i_1 = sequence[:i + 1] + sequence[i + 2:]\n            return all(without_i[j] < without_i[j + 1] for j in range(len(without_i) - 1)) or all(without_i_1[j] < without_i_1[j + 1] for j in range(len(without_i_1) - 1))\n    return True"}
{"task_id": 3978, "completion": "def check_for_factor(base, factor):\n    return base % factor == 0"}
{"task_id": 4262, "completion": "def calc_tip(p, r):\n    p = ((p + 10) // 10) * 10\n    t = (p // 10) % 10\n    if r == 1:\n        t += 1\n    elif r == 0:\n        t -= 1\n    elif r == -1:\n        t = (t // 2) - 1\n    return max(t, 0)"}
{"task_id": 2798, "completion": "def to_alternating_case(string):\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"task_id": 4411, "completion": "def find_missing_number(numbers):\n    n = len(numbers) + 1\n    total = n * (n + 1) // 2\n    return total - sum(numbers)"}
{"task_id": 3741, "completion": "def vector_affinity(a, b):\n    total = min(len(a), len(b))\n    if total == 0:\n        return 0.0\n    \n    count = sum(1 for x, y in zip(a, b) if x == y)\n    return count / total"}
{"task_id": 3242, "completion": "def maximum_product(arr):\n    result = max_elem = max_prod = float('-inf')\n    \n    for i, elem in enumerate(arr):\n        temp_arr = arr[:i] + arr[i+1:]\n        product = 1\n        for num in temp_arr:\n            product *= num\n        if product > max_prod or (product == max_prod and elem < max_elem):\n            max_prod = product\n            max_elem = elem\n            result = elem\n            \n    return result"}
{"task_id": 4453, "completion": "from collections import deque\n\ndef shortest_steps_to_num(num):\n    queue = deque([(1, 0)])\n    while queue:\n        current_num, steps = queue.popleft()\n        if current_num == num:\n            return steps\n        if current_num * 2 <= num:\n            queue.append((current_num * 2, steps + 1))\n        queue.append((current_num + 1, steps + 1))"}
{"task_id": 3616, "completion": "from math import gcd\n\ndef prime_primes(N):\n    primes = [i for i in range(2, N) if all(i % j != 0 for j in range(2, int(i**0.5) + 1))]\n    \n    summation = 0\n    count = 0\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            count += 1\n            summation += primes[i] / primes[j]\n\n    int_part = int(summation)\n    return count, int_part"}
{"task_id": 3439, "completion": "def solve(n):\n    max_digit_sum = 0\n    result = 0\n    \n    for i in range(n // 2 + 1):\n        a = i\n        b = n - i\n        \n        digit_sum_a = sum(int(c) for c in str(a))\n        digit_sum_b = sum(int(c) for c in str(b))\n        \n        current_sum = digit_sum_a + digit_sum_b\n        \n        if current_sum > max_digit_sum:\n            max_digit_sum = current_sum\n            result = current_sum\n    \n    return result\n\n# Test the function with the given test case\nprint(solve(29))  # Output: 11"}
{"task_id": 3155, "completion": "def fit_in(a, b, m, n):\n    if a <= 0 or b <= 0 or m <= 0 or n <= 0:\n        return False\n    if (a + b) <= min(m, n) and max(a, b) <= max(m, n):\n        return True\n    return False"}
{"task_id": 3562, "completion": "def count_inversion(sequence):\n    count = 0\n    for i in range(len(sequence)):\n        for j in range(i+1, len(sequence)):\n            if sequence[i] > sequence[j]:\n                count += 1\n    return count"}
{"task_id": 3883, "completion": "import itertools\n\ndef solve(s):\n    vowels = 'aeiou'\n    consonants = ''.join([c for c in 'abcdefghijklmnopqrstuvwxyz' if c not in vowels])\n\n    def check_alternating(s):\n        for i in range(len(s) - 1):\n            if s[i] in vowels and s[i + 1] in vowels:\n                return False\n            if s[i] in consonants and s[i + 1] in consonants:\n                return False\n        return True\n\n    if any(x == y for x, y in zip(s, s[1:])):\n        return \"failed\"\n\n    v_count = sum(1 for c in s if c in vowels)\n    c_count = len(s) - v_count\n\n    if abs(v_count - c_count) > 1 or (v_count == c_count and s[0] in consonants):\n        return \"failed\"\n\n    all_alternations = [''.join(p) for p in itertools.permutations(s) if check_alternating(p)]\n\n    return sorted(all_alternations)[0]"}
{"task_id": 4277, "completion": "def difference_in_ages(ages):\n    min_age = min(ages)\n    max_age = max(ages)\n    diff = max_age - min_age\n    return [min_age, max_age, diff]"}
{"task_id": 3836, "completion": "def factors(x):\n    if not isinstance(x, int) or x < 1:\n        return -1\n    return [i for i in range(x, 0, -1) if x % i == 0]"}
{"task_id": 3531, "completion": "def valid_mersenne(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    mersenne_num = 2 ** n - 1\n    return is_prime(mersenne_num)"}
{"task_id": 1643, "completion": "def almost_everywhere_zero(n, k):\n    return sum(1 for i in range(1, n + 1) if str(i).count('0') == len(str(i)) - k)"}
{"task_id": 1627, "completion": "def is_polydivisible(n, b):\n    num = int(n, b)\n    for i in range(1, len(n) + 1):\n        if num % i != 0:\n            return False\n    return True\n\ndef get_polydivisible(n, b):\n    count = 0\n    number = 0\n    while count < n:\n        if is_polydivisible(str(number), b):\n            count += 1\n        number += 1\n    return str(number - 1)"}
{"task_id": 1663, "completion": "def count_divisors(n):\n    result = 0\n    limit = int(n**0.5)\n    for i in range(1, limit + 1):\n        result += (n // i) - i\n    result = result * 2 + limit if int(n ** 0.5) ** 2 == n else result * 2 + limit + 1\n    return result"}
{"task_id": 1640, "completion": "def mix(s1, s2):\nfrom collections import Counter\n\n    def extract_lowercase(s):\n        return {char for char in s if char.islower()}\n\n    def count_frequency(s, unique_lower):\n        return Counter(char for char in s if char in unique_lower)\n\n    s1_lower = extract_lowercase(s1)\n    s2_lower = extract_lowercase(s2)\n\n    s1_count = count_frequency(s1, s1_lower)\n    s2_count = count_frequency(s2, s2_lower)\n\n    max_occurrences = {char: (1, count) if count > s2_count.get(char, 0) else\n                       (2, s2_count[char]) if s2_count.get(char, 0) > count else\n                       ('=', count) for char, count in s1_count.items() if count > 1}\n\n    result = []\n    for char, (string_num, freq) in max_occurrences.items():\n        result.append((string_num, char * freq))\n\n    return '/'.join(['{}:{}'.format(string_num, sub_str) for string_num, sub_str in sorted(result, key=lambda x: (-len(x[1]), x[1]))])"}
{"task_id": 1654, "completion": "def solve_runes(runes):\n    for digit in '1234567890':\n        if digit not in runes and eval(runes.replace('?', digit)) == True:\n            return int(digit)\n    return -1"}
{"task_id": 1616, "completion": "def parse_int(string):\n    words_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9,\n                    'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17,\n                    'eighteen': 18, 'nineteen': 19, 'twenty': 20, 'thirty': 30, 'forty': 40, 'fifty': 50, 'sixty': 60, 'seventy': 70,\n                    'eighty': 80, 'ninety': 90, 'hundred': 100, 'thousand': 1000, 'million': 1000000}\n    \n    total = current = prev_current = 0\n    for word in string.replace(' and', '').split():\n        if word == 'million':\n            total += current * 1000000\n            prev_current = current\n            current = 0\n        elif word == 'thousand':\n            total += prev_current * 1000\n            prev_current = current\n            current = 0\n        else:\n            current += words_to_num[word]\n    \n    return total + current"}
{"task_id": 1642, "completion": "def multiply(n, k):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if k == 1:\n                count += 1 if n // i >= i else 0\n            else:\n                count += multiply(n // i, k - 1)\n    return count"}
{"task_id": 1665, "completion": "def same_structure_as(arr1, arr2):\n    if isinstance(arr1, list) != isinstance(arr2, list):\n        return False\n    if not isinstance(arr1, list):\n        return True\n    if len(arr1) != len(arr2):\n        return False\n    for elem1, elem2 in zip(arr1, arr2):\n        if not same_structure_as(elem1, elem2):\n            return False\n    return True"}
{"task_id": 1648, "completion": "def spinningRings(innerMax, outerMax):\nfrom mathimport gcd\n    return abs(innerMax - outerMax) + min(innerMax, outerMax) * 2"}
{"task_id": 1617, "completion": "from math import pi\n\ndef converter(n, decimals=0, base=pi):\n    def convert_base(n, base):\n        digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        result = ''\n        negative = False\n        if n < 0:\n            negative = True\n            n = -n\n        \n        while n:\n            n, remainder = divmod(n, int(base))\n            result = digits[int(remainder)] + result\n        \n        if negative:\n            result = '-' + result\n        \n        return result\n    \n    int_part = convert_base(int(abs(n)), int(base))\n    decimal_part = ''\n    \n    if decimals > 0:\n        decimal_part += '.'\n        fraction = abs(n) - int(abs(n))\n        \n        for _ in range(decimals):\n            fraction *= int(base)\n            digit = int(fraction)\n            decimal_part += str(digit)\n            fraction -= digit\n        \n    return int_part + decimal_part"}
{"task_id": 1660, "completion": "def simplify(poly):\nimport re\n    def parse_term(term):\n        parts = re.match(r\"([+-]?)(\\d*)([a-z]*)\", term).groups()\n        sign = -1 if parts[0] == '-' else 1\n        coeff = int(parts[1]) * sign if parts[1] else sign\n        var = ''.join(sorted(parts[2]))\n        return (coeff, var)\n\n    terms = re.findall(r\"[+-]?[0-9]*[a-z]*\", poly)\n    terms_dict = {}\n    for term in terms:\n        if term:\n            coeff, var = parse_term(term)\n            if var in terms_dict:\n                terms_dict[var] += coeff\n            else:\n                terms_dict[var] = coeff\n   \n    sorted_terms = sorted(terms_dict.items(), key=lambda x: (len(x[0]), x[0]))\n    result = ''.join(\"{:+d}{}\".format(coeff, var) for var, coeff in sorted_terms if coeff != 0)\n    return result if result.startswith('+') else result.lstrip('+')"}
{"task_id": 1613, "completion": "def solution(string, markers):\n    lines = string.split('\\n')\n    for i in range(len(lines)):\n        for marker in markers:\n            if marker in lines[i]:\n                lines[i] = lines[i].split(marker)[0].rstrip()\n    return '\\n'.join(lines)"}
{"task_id": 1630, "completion": "def survivor(zombies):\n    zombies = set(zombies)\n    for i in range(1, sum(zombies) + 1):\n        if i not in zombies:\n            return i\n    return -1"}
{"task_id": 1668, "completion": "def next_smaller(n):\n    num_str = str(n)\n    for i in range(len(num_str)-1, 0, -1):\n        if num_str[i] < num_str[i-1]:\n            prefix = num_str[:i-1]\n            suffix = sorted(num_str[i-1:])\n            for char in suffix:\n                if char < num_str[i-1] and char != '0':\n                    return int(prefix + char + ''.join(suffix).replace(char, '', 1))\n    return -1"}
{"task_id": 1634, "completion": "def total_inc_dec(x):\n    n = 9\n    for _ in range(2, x + 1):\n        n = n * (n + 1) // 2 + n\n    \n    return n + 1"}
{"task_id": 1645, "completion": "def sum_of_squares(n):\n    while n % 4 == 0:\n        n //= 4\n    if n % 8 == 7:\n        return 4\n    for i in range(int(n**0.5)+1):\n        if (n - i*i)**0.5 == int((n - i*i)**0.5):\n            return bool(i) + bool((n - i*i)**0.5)"}
{"task_id": 1666, "completion": "def solution(a):\n    while len(set(a)) > 1:\n        a = [x for x in a if x != 0]\n        min_val = min(a)\n        a = [x % min_val for x in a]\n    return sum(a)"}
{"task_id": 1659, "completion": "def exp_sum(n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dp[j] += dp[j - i]\n    return dp[n]"}
{"task_id": 1647, "completion": "def next_bigger(n):\n    n = list(str(n))\n    i = len(n) - 2\n    while i >= 0 and n[i] >= n[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(n) - 1\n    while j > i and n[j] <= n[i]:\n        j -= 1\n    n[i], n[j] = n[j], n[i]\n    n[i + 1:] = sorted(n[i + 1:])\n    return int(''.join(n))"}
{"task_id": 1646, "completion": "def green(n):\n    count = 0\n    number = 1\n    while count < n:\n        if str(number ** 2)[-len(str(number)):] == str(number):\n            count += 1\n        number += 1\n    return str(number-1)"}
{"task_id": 1656, "completion": "def count_subsequences(needle, haystack):\n    dp = [0] * (len(haystack) + 1)\n    dp[0] = 1\n    for char in needle:\n        for i in range(len(haystack) - 1, -1, -1):\n            if char == haystack[i]:\n                dp[i + 1] += dp[i]\n    \n    return dp[-1] % 100000000\n\n# Test Case\nprint(count_subsequences(\"happy birthday\", \"hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu\"))"}
{"task_id": 1649, "completion": "def traverse_TCP_states(events):\n    state = \"CLOSED\"\n    transitions = {\n        \"CLOSED\": {\n            \"APP_PASSIVE_OPEN\": \"LISTEN\",\n            \"APP_ACTIVE_OPEN\": \"SYN_SENT\"\n        },\n        \"LISTEN\": {\n            \"RCV_SYN\": \"SYN_RCVD\",\n            \"APP_SEND\": \"SYN_SENT\",\n            \"APP_CLOSE\": \"CLOSED\"\n        },\n        \"SYN_RCVD\": {\n            \"APP_CLOSE\": \"FIN_WAIT_1\",\n            \"RCV_ACK\": \"ESTABLISHED\"\n        },\n        \"SYN_SENT\": {\n            \"RCV_SYN\": \"SYN_RCVD\",\n            \"RCV_SYN_ACK\": \"ESTABLISHED\",\n            \"APP_CLOSE\": \"CLOSED\"\n        },\n        \"ESTABLISHED\": {\n            \"APP_CLOSE\": \"FIN_WAIT_1\",\n            \"RCV_FIN\": \"CLOSE_WAIT\"\n        },\n        \"FIN_WAIT_1\": {\n            \"RCV_FIN\": \"CLOSING\",\n            \"RCV_FIN_ACK\": \"TIME_WAIT\",\n            \"RCV_ACK\": \"FIN_WAIT_2\"\n        },\n        \"CLOSING\": {\n            \"RCV_ACK\": \"TIME_WAIT\"\n        },\n        \"FIN_WAIT_2\": {\n            \"RCV_FIN\": \"TIME_WAIT\"\n        },\n        \"TIME_WAIT\": {\n            \"APP_TIMEOUT\": \"CLOSED\"\n        },\n        \"CLOSE_WAIT\": {\n            \"APP_CLOSE\": \"LAST_ACK\"\n        },\n        \"LAST_ACK\": {\n            \"RCV_ACK\": \"CLOSED\"\n        }\n    }\n    \n    for event in events:\n        if state in transitions and event in transitions[state]:\n            state = transitions[state][event]\n        else:\n            return \"ERROR\"\n    \n    return state"}
{"task_id": 1621, "completion": "def count_change(amount, coins):\n    ways = [0] * (amount + 1)\n    ways[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            ways[i] += ways[i-coin]\n    return ways[amount]"}
{"task_id": 1628, "completion": "def proper_fractions(n):\n    if n == 1:\n        return 0\n    result = n\n    for p in range(2, int(n**(0.5)) + 1):\n        if n % p == 0:\n            while n % p == 0:\n                n //= p\n            result -= result // p\n    if n > 1:\n        result -= result // n\n    return result\n\n"}
{"task_id": 1604, "completion": "def solution():\n    MOD = 10**9 + 7\n    n, m = map(int, input().split())\n    labyrinth = [input() for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if labyrinth[i][j] == 'R':\n                dp[i][j] = 0\n            else:\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n            \n            dp[i][j] %= MOD\n\n    print(dp[n-1][m-1])\n\n"}
{"task_id": 1622, "completion": "def bowlingScore(frames):\n    total_score = 0\n    frame_idx = 0\n\n    while frame_idx < len(frames):\n        if frames[frame_idx] == 'X':\n            total_score += 10\n            total_score += sum(int(r) if r.isdigit() else 10 for r in frames[frame_idx+1:frame_idx+3])\n        elif '/' in frames[frame_idx]:\n            total_score += 10\n            total_score += int(frames[frame_idx+1][0])\n        else:\n            total_score += sum(int(r) for r in frames[frame_idx].replace('/', ''))\n        frame_idx += 1\n\n    return total_score\n\n# Test cases\nprint(bowlingScore('X X X X X X X X X XXX'))  # Output: 300\nprint(bowlingScore('X X 9/ 80 X X 90 8/ 7/ 44'))  # Output: 171"}
{"task_id": 1658, "completion": "from math import factorial\n\ndef expand(x, digits):\n    num = 1\n    den = 1\n    term = 1\n    i = 1\n    \n    while len(str(num)) < digits:\n        num += term\n        den *= i\n        term *= x / i\n        i += 1\n    \n    return [num, den]"}
{"task_id": 1626, "completion": "def solve(n):\n    i = 1\n    while n > i * (10**i - 1):\n        n -= i * (10**i - 1)\n        i += 1\n    num = 10**(i - 1) + (n - 1) // i\n    return int(str(num)[(n - 1) % i])"}
{"task_id": 1629, "completion": "def exchange_sort(sequence):\n    count = [sequence.count(7), sequence.count(8), sequence.count(9)]\n    return sum(count) - max(count)"}
{"task_id": 1618, "completion": "def differentiate(polynomial, point):\n    derivative = 0\n    terms = polynomial.replace('-', '+-').split('+')\n\n    for term in terms:\n        if 'x^' in term:\n            coef, exp = map(int, term.split('x^'))\n        elif 'x' in term:\n            coef = 1 if term.replace('x', '') == '' else int(term.replace('x', ''))\n            exp = 1\n        else:\n            coef = int(term)\n            exp = 0\n            \n        derivative += coef * exp * (point ** max(exp - 1, 0))\n    \n    return derivative"}
{"task_id": 1638, "completion": "def longest_palindrome(s):\n    if len(s) < 1:\n        return \"\"\n    \n    def expand_around_center(s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n    \n    start, end = 0, 0\n    for i in range(len(s)):\n        len1 = expand_around_center(s, i, i)\n        len2 = expand_around_center(s, i, i + 1)\n        max_len = max(len1, len2)\n        if max_len > end - start:\n            start = i - (max_len - 1) // 2\n            end = i + max_len // 2\n\n    return s[start:end + 1]"}
{"task_id": 2096, "completion": "def solution(input_str):\n    # Convert the input string into usable variables\n    lines = input_str.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    indices = {a[i]: i for i in range(n)}\n    sorted_a = sorted(a)\n    visited = [False] * n\n    res = []\n\n    for i in range(n):\n        if visited[i]:\n            continue\n        subseq = [i + 1]\n        visited[i] = True\n        j = indices[sorted_a[i]]\n        while j != i:\n            subseq.append(j + 1)\n            visited[j] = True\n            j = indices[sorted_a[j]]\n        res.append(subseq)\n\n    # Prepare the result to be returned as a list of strings\n    result = [str(len(res))]\n    for subseq in res:\n        result.append(f\"{len(subseq)} \" + \" \".join(map(str, subseq)))\n\n    return \"\\n\".join(result)"}
{"task_id": 2098, "completion": "def solution(input_string):\n    # Split input string into components\n    input_lines = input_string.strip().split('\\n')\n    n, m = map(int, input_lines[0].split())\n    votes = [tuple(map(int, line.split())) for line in input_lines[1:]]\n\n    costs = [0] * m\n    total_cost = 0\n    vote_counts = [0] * m\n\n    for vote in votes:\n        party, cost = vote\n        vote_counts[party - 1] += 1\n\n    for i in range(n):\n        for j in range(1, m):\n            if vote_counts[j] >= vote_counts[0]:\n                diff = vote_counts[j] - vote_counts[0] + 1\n                if votes[i][0] == j+1 and votes[i][1] < diff * votes[i][1]:\n                    total_cost += diff * votes[i][1]\n                    vote_counts[j] -= diff\n                    vote_counts[0] += diff\n\n    return str(total_cost)"}
{"task_id": 2189, "completion": "def solution():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        piles = list(map(int, input().split()))\n        total_sum = sum(piles)\n        if total_sum % 2 == 1:\n            print(\"T\")\n        else:\n            print(\"HL\")"}
{"task_id": 2063, "completion": "def solution():\n    n, m = map(int, input().split())\n    employees = [list(map(int, input().split()[1:])) for _ in range(n)]\n\n    languages = set()\n    for employee in employees:\n        for language in employee:\n            languages.add(language)\n\n    min_money = float('inf')\n    for language in languages:\n        cost = 0\n        for employee in employees:\n            if language not in employee:\n                cost += 1\n        min_money = min(min_money, cost)\n\n    print(min_money)\n\n"}
{"task_id": 2092, "completion": "def solution():\n    n = int(input())\n    home_airport = input().strip()\n    visited_airports = set()\n\n    for _ in range(n):\n        departure, arrival = input().strip().split(\"->\")\n        if departure == home_airport:\n            visited_airports.add(arrival)\n        else:\n            visited_airports.discard(departure)\n\n    if visited_airports:\n        print(\"contest\")\n    else:\n        print(\"home\")\n\n"}
{"task_id": 2218, "completion": "def solution():\n    n = int(input())\n    balances = list(map(int, input().split()))\n    q = int(input())\n\n    for _ in range(q):\n        event = input().split()\n        if len(event) == 3:\n            p, x = map(int, event[1:])\n            balances[p-1] = x\n        else:\n            x = int(event[1])\n            for i in range(n):\n                if balances[i] < x:\n                    balances[i] = x\n\n    print(*balances)\n\n"}
{"task_id": 2224, "completion": "def solution(input_str):\n    # Split the input string into individual parts\n    input_list = input_str.split()\n    n = int(input_list[0])  # The length of the binary strings\n    a = input_list[1]  # The first binary string\n    b = input_list[2]  # The second binary string\n\n    c_original = int(a, 2) | int(b, 2)\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a_list = list(a)\n            a_list[i], a_list[j] = a_list[j], a_list[i]\n            a_new = ''.join(a_list)\n            c_new = int(a_new, 2) | int(b, 2)\n            if c_new != c_original:\n                count += 1\n\n    return str(count) +\"\\n\""}
{"task_id": 2010, "completion": "def solution(n, towers):\n    max_height = max(towers)\n    operations = towers.count(max_height)\n    return operations"}
{"task_id": 2064, "completion": "def solution():\n    n, q = map(int, input().split())\n    grid = [[True] * n for _ in range(2)]\n    reachable = True\n\n    def bfs():\n        visited = set()\n        stack = [(0, 0)]\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        while stack:\n            x, y = stack.pop()\n            if (x, y) == (1, n-1):\n                return True\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < 2 and 0 <= ny < n and grid[nx][ny] and (nx, ny) not in visited:\n                    stack.append((nx, ny))\n                    visited.add((nx, ny))\n\n        return False\n\n    for _ in range(q):\n        r, c = map(int, input().split())\n        r -= 1\n        c -= 1\n        grid[r][c] = not grid[r][c]\n\n        if not reachable:\n            print(\"No\")\n            continue\n\n        if bfs():\n            print(\"Yes\")\n        else:\n            reachable = False\n            print(\"No\")\n\n"}
{"task_id": 2174, "completion": "def solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n    distinct_values = set()\n    \n    for i in range(n):\n        current_val = a[i]\n        distinct_values.add(current_val)\n        for j in range(i+1, n):\n            current_val |= a[j]\n            distinct_values.add(current_val)\n    \n    print(len(distinct_values))\n\n"}
{"task_id": 2233, "completion": "MOD = 10**9 + 7\n\nt = int(input())\nm_values = list(map(int, input().split()))\n\nfor m in m_values:\n    count = 0\n    for a0 in range(8):\n        for a1 in range(8):\n            for a2 in range(8):\n                if (a0 + 2*a1 + 4*a2) % MOD == m:\n                    count += 1\n\n    print(count % MOD)"}
{"task_id": 2166, "completion": "def solution():\n    n = int(input())\n    rick_k, *rick_s = map(int, input().split())\n    morty_k, *morty_s = map(int, input().split())\n\n    results_rick = [\"\"] * (n - 1)\n    results_morty = [\"\"] * (n - 1)\n\n    for i in range(1, n):\n        visited = [False] * n\n\n        for player in ['Rick', 'Morty']:\n            moves = rick_s if player == 'Rick' else morty_s\n            next_results = [\"Loop\"] * len(moves)\n\n            for index, move in enumerate(moves):\n                next_pos = (i + move) % n\n                if next_pos == 0:\n                    next_results[index] = \"Win\"\n                elif any(not visited[(next_pos + move) % n] for move in moves):\n                    next_results[index] = \"Loop\"\n                else:\n                    next_results[index] = \"Lose\"\n\n            if player == 'Rick':\n                results_rick[i - 1] = max(next_results)\n            else:\n                results_morty[i - 1] = max(next_results)\n\n    print(\" \".join(results_rick))\n    print(\" \".join(results_morty))\n\n"}
{"task_id": 2133, "completion": "def solution():\n    n = int(input())\n    rooms_needed = 0\n\n    for _ in range(n):\n        group_schedule = input()\n        max_scheduling = 0\n\n        for i in range(7):\n            count = sum([int(group_schedule[j]) for j in range(i, 7, 7)])\n            max_scheduling = max(max_scheduling, count)\n\n        rooms_needed = max(rooms_needed, max_scheduling)\n\n    print(rooms_needed)\n\n"}
{"task_id": 2184, "completion": "n, q = map(int, input().split())\na = list(map(int, input().split()))\n\nblocks = []\nblock_count = 1\n\nfor i in range(1, n):\n    if a[i] != a[i-1]:\n        blocks.append(block_count)\n        block_count = 1\n    else:\n        block_count += 1\n\nblocks.append(block_count)\n\ninitial_difficulty = sum(1 for block in blocks if block > 1)\nprint(initial_difficulty)"}
{"task_id": 2183, "completion": "def solution(t, test_cases):\n    MOD = 10**9 + 7\n    ans = []\n    \n    for x, s in test_cases:\n        length = len(s)\n        while length < x:\n            s += s[-1] * int(s[-1])\n            length = len(s)\n        ans.append(len(s) % MOD)\n    \n    return ans"}
{"task_id": 1607, "completion": "def count_QAQ(s):\n    n = len(s)\n    \n    count = 0\n    for i in range(n):\n        if s[i] == 'Q':\n            for j in range(i+1, n):\n                if s[j] == 'A':\n                    for k in range(j+1, n):\n                        if s[k] == 'Q':\n                            count += 1\n    \n    return f\"{count}\\n\"\n\n"}
{"task_id": 2190, "completion": "def solution():\n    n = int(input())\n    ids = list(map(int, input().split()))\n\n    steps = 0\n    max_steps = 0\n    \n    for i in range(n-1):\n        if ids[i] < ids[i+1]:\n            steps += 1\n            max_steps = max(max_steps, steps)\n        else:\n            steps = 0\n\n    print(max_steps)\n\n"}
{"task_id": 2095, "completion": "n = int(input())\na = list(map(int, input().split()))\n\nchanged = set()\nfor i in range(n):\n    if i + 1 != a[i]:\n        if i + 1 in changed:\n            a[i] = i + 1\n        else:\n            changed.add(a[i])\n\n"}
{"task_id": 2042, "completion": "def solution(n, a, b, T, orientations):\n    count = 0\n    cur_time = 1\n    idx = 0\n    \n    while cur_time <= T:\n        if orientations[idx] == 'h':\n            cur_time += 1\n            idx = (idx + 1) % n\n            count += 1\n        else:\n            if (cur_time + b) > T:\n                break\n            cur_time += b\n            cur_time += 1\n            idx = (idx + 1) % n\n            count += 1\n        if idx == 0:\n            break\n        cur_time += a\n    \n    return count"}
{"task_id": 2037, "completion": "def solution(n, employees):\n    current_floor = 1\n    elevator_queue = []\n    time = 0\n\n    for employee in employees:\n        initial_floor, desired_floor = employee\n        time += abs(initial_floor - current_floor)\n        current_floor = initial_floor\n        time += 1\n\n        time += abs(desired_floor - current_floor)\n        current_floor = desired_floor\n        time += 1\n\n        elevator_queue.append(desired_floor)\n\n    waiting_employees = 0\n    passed_floors = []\n\n    for employee_floor, _ in employees:\n        if employee_floor not in passed_floors:\n            passed_floors.append(employee_floor)\n            waiting_employees += 1\n\n            time += 1\n\n            if waiting_employees % 4 == 0:\n                time += 1\n\n    return time"}
{"task_id": 2199, "completion": "from collections import defaultdict\n\ndef dfs(node, parent, k):\n    happiness = 0\n    children_happiness = []\n    for child in graph[node]:\n        if child != parent:\n            child_happiness = dfs(child, node, k)\n            children_happiness.append(child_happiness)\n            happiness += child_happiness\n\n    if k[0] > 0 or node == 1:\n        happiness += 1\n        children_happiness.append(0)\n        k[0] -= 1\n\n    max_child_happiness = max(children_happiness)\n    if max_child_happiness == 0:\n        return happiness\n    return happiness - max_child_happiness + 1\n\n"}
{"task_id": 2144, "completion": "def solution():\n    k = int(input())\n    boxes = []\n    for _ in range(k):\n        n, *nums = map(int, input().split())\n        boxes.append((n, nums))\n\n    total_sum = sum(sum(nums) for _, nums in boxes)\n    if total_sum % k != 0:\n        print(\"No\")\n    else:\n        target_sum = total_sum // k\n        moves = []\n        moved_nums = set()\n        for i in range(k):\n            diff = target_sum - sum(boxes[i][1])\n            for num in boxes[i][1]:\n                if diff + num not in moved_nums:\n                    moves.append((num, i+1))\n                    moved_nums.add(num)\n                    break\n        if len(moves) == k:\n            print(\"Yes\")\n            for move in moves:\n                print(move[0], move[1])\n        else:\n            print(\"No\")"}
{"task_id": 2170, "completion": "from math import ceil\n\ndef solution():\n    n, k = map(int, input().split())\n    carrots = list(map(int, input().split()))\n\n    total_carrots = sum(carrots)\n    pieces_per_carrot = ceil(total_carrots / k)\n\n    carrots.sort()\n    extra_pieces = total_carrots % k\n    result = sum((carrot - pieces_per_carrot)**2 for carrot in carrots[:k - extra_pieces]) + sum((carrot - pieces_per_carrot + 1)**2 for carrot in carrots[k - extra_pieces:])\n\n    print(result)\n\n"}
{"task_id": 2070, "completion": "def solution():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    c = 1\n    for i in range(n):\n        c = c + (-1)**i*a[i]\n\n    print(c % (10**9 + 7))\n\n"}
{"task_id": 2215, "completion": "from collections import defaultdict\n\ndef solution(n, m, k, roads, train_routes):\n    graph = defaultdict(list)\n    for u, v, x in roads:\n        graph[u].append((v, x))\n        graph[v].append((u, x))\n\n    distances = [float('inf')] * (n + 1)\n    distances[1] = 0\n\n    pq = [(0, 1)]\n\n    while pq:\n        dist, node = pq.pop(0)\n\n        if dist > distances[node]:\n            continue\n\n        for neighbor, weight in graph[node]:\n            if dist + weight < distances[neighbor]:\n                distances[neighbor] = dist + weight\n                pq.append((dist + weight, neighbor))\n\n    necessary_train_routes = 0\n\n    for s, y in train_routes:\n        if distances[s] == y:\n            necessary_train_routes += 1\n\n    return k - necessary_train_routes"}
{"task_id": 2187, "completion": "def solution(n):\n    if n % 2 == 0:\n        print(n // 2)\n        for i in range(1, n // 2 + 1):\n            print(i, i + n // 2)\n    else:\n        print((n - 1) // 2)\n        for i in range(1, (n - 1) // 2):\n            print(i, i + (n - 1) // 2 + 1)"}
{"task_id": 2047, "completion": "def solution(n, k, parking_lot):\n    def move_car_to_target(parking_lot, target_row, target_col, row, col, car_num):\n        moves = []\n        while row != target_row or col != target_col:\n            if row < target_row:\n                row += 1\n            elif row > target_row:\n                row -= 1\n            elif col < target_col:\n                col += 1\n            else:\n                col -= 1\n            moves.append((car_num, row + 1, col + 1))\n        return moves\n\n    target = []  # list to store target position of each car\n    for i in [0, 3]:  # first and last row\n        for j in range(n):\n            if parking_lot[i][j] != 0:\n                target.append((i, j, parking_lot[i][j]))\n\n    moves = []  # list to store final moves\n    for i in [1, 2]:  # only cars in these rows can move\n        for j in range(n):\n            if parking_lot[i][j] != 0:\n                row, col, car_num = target[parking_lot[i][j] - 1]\n                moves += move_car_to_target(parking_lot, row, col, i, j, parking_lot[i][j])\n\n    if len(moves) > 20000:\n        return [-1]\n    else:\n        return [str(len(moves))] + [' '.join(map(str, move)) for move in moves]\n\n# Read input values\nn, k = map(int, input().split())\nparking_lot = [list(map(int, input().split())) for _ in range(4)]\n\n# Call the solution function and print the output\nfor line in solution(n, k, parking_lot):\n    print(line)"}
{"task_id": 2026, "completion": "from heapq import heappush, heappop\n\ndef solution():\n    n, d = map(int, input().split())\n    a = list(map(int, input().split()))\n    stations = [tuple(map(int, input().split())) for _ in range(n)]\n\n    dist = lambda i, j: abs(stations[i][0] - stations[j][0]) + abs(stations[i][1] - stations[j][1])\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n    q = [(0, 0)]\n\n    while q:\n        du, u = heappop(q)\n        if du != dp[u]:\n            continue\n        for v in range(n):\n            cost = du + d * dist(u, v)\n            if v != u and cost < dp[v]:\n                dp[v] = cost\n                heappush(q, (cost, v))\n        \n        for v in range(2, n):\n            cost = du + a[v-2]\n            if cost < dp[v]:\n                dp[v] = cost\n                heappush(q, (cost, v))\n\n    print(dp[n-1])"}
{"task_id": 2146, "completion": "def solution(n, d, m, a):\n    a.sort()\n    \n    max_fun_factor = 0\n    \n    for i in range(1, n+1):\n        b = a[-i:]\n        fun_factor = 0\n        for j in range(len(b)):\n            if b[j] > m and (i-1)*d >= j:\n                continue\n            fun_factor += b[j]\n        max_fun_factor = max(max_fun_factor, fun_factor)\n    \n    return max_fun_factor"}
{"task_id": 2159, "completion": "def solution(n, T, tasks):\n    tasks.sort(key=lambda x: (-x[1], x[0]))\n    dp = [[0] * (T + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, T + 1):\n            if tasks[i - 1][0] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - tasks[i - 1][0]] + tasks[i - 1][1])\n   \n    return dp[n][T]"}
{"task_id": 2009, "completion": "def solution():\n    n = int(input())\n    moves = [list(map(int, input().split())) for _ in range(n)]\n    \n    signs = []\n    for move in moves:\n        norm_pos = (move[0]**2 + move[1]**2)**0.5\n        norm_neg = (-move[0]**2 + move[1]**2)**0.5\n        \n        if norm_pos <= 1.5 * 10**6 or norm_neg <= 1.5 * 10**6:\n            signs.append(1)\n        else:\n            signs.append(-1)\n    \n    print(*signs)\n    \n"}
{"task_id": 2066, "completion": "def solution(n, positions):\n    positions.sort()\n    return abs(positions[n // 2] - positions[n // 2 - 1])"}
{"task_id": 2104, "completion": "def solution():\n    n = int(input())\n    coordinates = list(map(int, input().split()))\n    \n    x_values = sorted(coordinates[:n])\n    y_values = sorted(coordinates[n:])\n    \n    min_x = x_values[n-1] - x_values[0]\n    min_y = y_values[n-1] - y_values[0]\n    \n    print(min_x * min_y)"}
{"task_id": 2075, "completion": "def solution():\n    n, m, k = map(int, input().split())\n    alice_fish = list(map(int, input().split()))\n    bob_fish = list(map(int, input().split()))\n\n    alice_weight = sum([1 / f for f in set(alice_fish)])  # Calculate the total weight for Alice\n    bob_weight = sum([1 / f for f in set(bob_fish)])  # Calculate the total weight for Bob\n\n    if alice_weight > bob_weight:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}
{"task_id": 2000, "completion": "import sys\n\ndef solution():\n    n, m, a, b = map(int, input().split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v, c = map(int, input().split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n\n    def prim(graph, time):\n        visited = {i: False for i in range(1, n + 1)}\n        pq = [(0, 1)]\n        total_time = 0\n\n        while pq:\n            t, node = heapq.heappop(pq)\n            if visited[node]:\n                continue\n            visited[node] = True\n            total_time += t\n            for neighbor, neighbor_time in graph[node]:\n                if not visited[neighbor] and neighbor_time == time:\n                    heapq.heappush(pq, (neighbor_time, neighbor))\n\n        return total_time\n\n    min_times = []\n    for p in range(1, n + 1):\n        min_time1 = sys.maxsize\n        min_time2 = sys.maxsize\n        for i in range(1, n + 1):\n            min_time1 = min(min_time1, prim(graph, a, i))\n            min_time2 = min(min_time2, prim(graph, b, i))\n        min_times.append(min(min_time1, min_time2))\n\n    print(\" \".join(map(str, min_times)))\n\n"}
{"task_id": 2065, "completion": "def solution():\n    n, k = map(int, input().split())\n    chains = []\n    for _ in range(k):\n        chain = list(map(int, input().split()))[1:]\n        chains.extend(chain)\n    chains_set = set(chains)\n    print(n - 1 + len(chains_set) - k)\n\n"}
{"task_id": 2198, "completion": "def solution():\n    n = int(input())\n    words = [input().strip() for _ in range(n)]\n\n    def normalize(word):\n        return word.replace(\"kh\", \"h\").replace(\"oo\", \"u\")\n\n    groups = set()\n    for word in words:\n        normalized_word = normalize(word)\n        groups.add(normalized_word)\n\n    print(len(groups))\n\n"}
{"task_id": 2073, "completion": "def solution():\n    n = int(input())\n    s = list(map(int, input().split()))\n\n    maximum_lucky_number = 0\n\n    for l in range(n):\n        max_element = s[l]\n        for r in range(l+1, n):\n            second_max_element = max(s[l:r+1])\n            lucky_number = max_element ^ second_max_element\n            if lucky_number > maximum_lucky_number:\n                maximum_lucky_number = lucky_number\n\n    print(maximum_lucky_number)\n\n"}
{"task_id": 2126, "completion": "from math import gcd\nfrom itertools import combinations\n\ndef solution(input_str):\n    # Process the input string\n    lines = input_str.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    t = set()\n    for pair in combinations(a, 2):\n        t.add(pair[0] * pair[1] // gcd(pair[0], pair[1]))\n\n    result = list(t)[0]\n    for elem in t:\n        result = gcd(result, elem)\n\n    return str(result) +\"\\n\""}
{"task_id": 2012, "completion": "def lucky_permutation(n):\n    if n % 2 == 0:\n        print(-1)\n    else:\n        res = [(i + (n + 1) // 2) % n + 1 for i in range(n)]\n        print(*res)"}
{"task_id": 2162, "completion": "def solution():\n    n = int(input())\n    adj_list = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    def calculate_probabilities(vertex, parent):\n        if len(adj_list[vertex]) == 1 and vertex != 1:\n            return [0] * (n + 1)\n\n        total_children = len(adj_list[vertex]) - (1 if parent != -1 else 0)\n        probabilities = [0] * (n + 1)\n        probabilities[vertex] = 1\n\n        queue = deque([(vertex, parent)])\n\n        while queue:\n            curr_vertex, curr_parent = queue.popleft()\n\n            for child in adj_list[curr_vertex]:\n                if child == curr_parent:\n                    continue\n\n                queue.append((child, curr_vertex))\n                child_probabilities = calculate_probabilities(child, curr_vertex)\n\n                for i in range(1, n + 1):\n                    probabilities[i] += child_probabilities[i] / total_children\n\n        return probabilities\n\n    final_probabilities = calculate_probabilities(1, -1)\n\n    for prob in final_probabilities[1:]:\n        print('{:.10f}'.format(prob))\n\n"}
{"task_id": 2192, "completion": "def solution():\n    n = int(input())\n    beacons = [list(map(int, input().split())) for _ in range(n)]\n    beacons.sort(reverse=True)\n    \n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if beacons[j][0] - beacons[j][1] > beacons[i][0])\n    \n    print(n - 1 - max(dp))\n\n"}
{"task_id": 2056, "completion": "def solution(n, a, b):\n    cost = 0\n\n    for i in range(n):\n        if a[i] != b[i]:\n            if i+1 < n and a[i+1] != b[i+1] and a[i] != a[i+1]:\n                cost += 1\n                a = a[:i] + a[i+1] + a[i] + a[i+2:]\n            else:\n                a = a[:i] + b[i] + a[i+1:]\n                cost += 1\n                \n    return cost"}
{"task_id": 2060, "completion": "def solution():\n    n, k = map(int, input().split())\n    photos = list(map(int, input().split()))\n    photos.sort()\n    \n    min_processing_time = float('inf')\n    \n    for i in range(k, n):\n        processing_time = photos[i] - photos[i - k]\n        min_processing_time = min(min_processing_time, processing_time)\n    \n    print(min_processing_time)\n\n"}
{"task_id": 2087, "completion": "def solution(n, l, r, Q_l, Q_r, weights):\n    cumsum_left = [0] * (n + 1)\n    cumsum_right = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        cumsum_left[i] = cumsum_left[i - 1] + weights[i - 1]\n    for i in range(n, 0, -1):\n        cumsum_right[i] = cumsum_right[i + 1] + weights[i - 1]\n\n    min_energy = float('inf')\n    for i in range(n + 1):\n        energy = (cumsum_left[i] * l) + (cumsum_right[i] * r)\n        if i > 0:\n            energy += Q_l * (i - 1)\n        if i < n:\n            energy += Q_r * (n - i - 1)\n        \n        min_energy = min(min_energy, energy)\n\n    return min_energy\n\n"}
{"task_id": 2130, "completion": "def solution(k, c):\n    mod = 1000000007\n    dp = [[0 for _ in range(k+1)] for _ in range(sum(c)+1)]\n    dp[0][0] = 1\n\n    for i in range(1, sum(c)+1):\n        dp[i][0] = 1\n        for j in range(1, min(i, k)+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-j][j-1]) % mod\n    \n    return dp[sum(c)][k] % mod"}
{"task_id": 2160, "completion": "def solution(n, k, durations):\n    total_duration = sum(durations)\n    if total_duration % k != 0:\n        return \"No\"\n    \n    desired_duration = total_duration // k\n    post_sizes = []\n    current_sum = 0\n    \n    for duration in durations:\n        current_sum += duration\n        if current_sum == desired_duration:\n            post_sizes.append(current_sum)\n            current_sum = 0\n        elif current_sum > desired_duration:\n            return \"No\"\n    \n    if len(post_sizes) == k:\n        return \"Yes\\n\" + ' '.join(map(str, post_sizes))\n    else:\n        return \"No\""}
{"task_id": 2153, "completion": "def solution(n):\n    if n % 3 != 0 and n % 4 != 0:\n        return -1\n    elif n % 3 == 0:\n        res = []\n        for i in range(1, n, 3):\n            res.append((3, i, (i % n) + 1, (i % n + 1) % n + 1))\n        return len(res), [\" \".join(map(str, x)) for x in res]\n    elif n % 4 == 0:\n        res = []\n        for i in range(1, n, 4):\n            res.append((4, i, i + 1, i + 2, i + 3))\n            res.append((4, i, i + 3, i + 2, i + 1))\n        return len(res), [\" \".join(map(str, x)) for x in res]"}
