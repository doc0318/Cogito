{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n    return False\n\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    for char in paren_string:\n        if char in '()':\n            current_group += char\n            if current_group.count('(') == current_group.count(')'):\n                groups.append(current_group)\n                current_group = ''\n    return groups\n\n# Test case\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return round((number - int(number)), 10)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result\n\n# Test cases\nassert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting_level(group):\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    return [find_max_nesting_level(group) for group in groups]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    prod_result = 1\n    for num in numbers:\n        prod_result *= num\n    return (sum_result, prod_result)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    for i in range(len(numbers)):\n        max_values.append(max(numbers[:i+1]))\n    return max_values"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    suffix = string\n    while suffix and suffix != suffix[::-1]:\n        suffix = suffix[1:]\n    return string + string[:len(string) - len(suffix)][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len) if strings else None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\nassert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n\n\nassert all_prefixes('abc') == ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n\n\n\nassert string_sequence(0) == '0'\nassert string_sequence(5) == '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_list = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_list.index(x)))\n\nassert sort_numbers('three one five') == 'one three five'"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            result = (numbers[i - 1], numbers[i])\n            min_diff = diff\n    return result\n\n# Test Cases\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num, max_num = min(numbers), max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]  # List comprehension to filter integers\n\nassert filter_integers(['a', 3.14, 5]) == [5]  # Test case 1\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]  # Test case 2"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\nassert strlen('') == 0\nassert strlen('abc') == 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\nassert largest_divisor(15) == 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n\nassert concatenate([]) == ''\nassert concatenate(['a', 'b', 'c']) == 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    n = len(xs) - 1\n    a = 1 if n % 2 == 0 else -1\n    b = math.sqrt((n - 1) ** 2 - 4 * n * xs[-1]) - (n - 1)\n    return b / (2 * n)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_copy = l[:]\n    indices_divisible_by_three = [i for i in range(len(l_copy)) if i % 3 == 0]\n    sorted_values = [l_copy[i] for i in indices_divisible_by_three]\n    sorted_values.sort()\n    \n    for i, val in zip(indices_divisible_by_three, sorted_values):\n        l_copy[i] = val\n        \n    return l_copy"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nassert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(1, n) if (i % 11 == 0 or i % 13 == 0))"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return [v if i % 2 == 1 else sorted(l[::2])[i//2] for i, v in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n\n    return fibonacci(num)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n\n\nassert car_race_collision(79) == 6241\nassert car_race_collision(125) == 15625\nassert car_race_collision(169) == 28561\nassert car_race_collision(195) == 38025\nassert car_race_collision(85) == 7225\nassert car_race_collision(199) == 39601\nassert car_race_collision(77) == 5929\nassert car_race_collision(108) == 11664\nassert car_race_collision(23) == 529\nassert car_race_collision(8) == 64\nassert car_race_collision(78) == 6084\nassert car_race_collision(10) == 100\nassert car_race_collision(155) == 24025\nassert car_race_collision(16) == 256\nassert car_race_collision(7) == 49\nassert car_race_collision(156) == 24336\nassert car_race_collision(164) == 26896\nassert car_race_collision(56) == 3136\nassert car_race_collision(17) == 289\nassert car_race_collision(106) == 11236\nassert car_race_collision(157) == 24649\nassert car_race_collision(14) == 196\nassert car_race_collision(13) == 169\nassert car_race_collision(99) == 9801\nassert car_race_collision(88) == 7744\nassert car_race_collision(123) == 15129\nassert car_race_collision(45) == 2025\nassert car_race_collision(41) == 1681\nassert car_race_collision(103) == 10609\nassert car_race_collision(63) == 3969\nassert car_race_collision(37) == 1369\nassert car_race_collision(60) == 3600\nassert car_race_collision(139) == 19321\nassert car_race_collision(100) == 10000\nassert car_race_collision(39) == 1521\nassert car_race_collision(133) == 17689\nassert car_race_collision(191) == 36481\nassert car_race_collision(174) == 30276\nassert car_race_collision(66) == 4356\nassert car_race_collision(48) == 2304\nassert car_race_collision(72) == 5184\nassert car_race_collision(185) == 34225\nassert car_race_collision(111) == 12321\nassert car_race_collision(97) == 9409\nassert car_race_collision(81) == 6561\nassert car_race_collision(102) == 10404\nassert car_race_collision(178) == 31684\nassert car_race_collision(180) == 32400\nassert car_race_collision(42) == 1764\nassert car_race_collision(183) == 33489\nassert car_race_collision(5) == 25\nassert car_race_collision(134) == 17956\nassert car_race_collision(31) == 961\nassert car_race_collision(146) == 21316\nassert car_race_collision(136) == 18496\nassert car_race_collision(166) == 27556\nassert car_race_collision(118) == 13924\nassert car_race_collision(70) == 4900\nassert car_race_collision(121) == 14641\nassert car_race_collision(149) == 22201\nassert car_race_collision(105) == 11025\nassert car_race_collision(90) == 8100\nassert car_race_collision(46) == 2116\nassert car_race_collision(114) == 12996\nassert car_race_collision(3) == 9\nassert car_race_collision(67) == 4489\nassert car_race_collision(19) == 361\nassert car_race_collision(2) == 4\nassert car_race_collision(73) == 5329\nassert car_race_collision(109) == 11881\nassert car_race_collision(175) == 30625\nassert car_race_collision(198) == 39204\nassert car_race_collision(50) == 2500\nassert car_race_collision(11) == 121\nassert car_race_collision(122) == 14884\nassert car_race_collision(117) == 13689\nassert car_race_collision(151) == 22801\nassert car_race_collision(184) == 33856\nassert car_race_collision(4) == 16\nassert car_race_collision(135) == 18225\nassert car_race_collision(147) == 21609\nassert car_race_collision(181) == 32761\nassert car_race_collision(142) == 20164\nassert car_race_collision(0) == 0\nassert car_race_collision(130) == 16900\nassert car_race_collision(172) == 29584\nassert car_race_collision(98) == 9604\nassert car_race_collision(65) == 4225\nassert car_race_collision(94) == 8836\nassert car_race_collision(28) == 784\nassert car_race_collision(120) == 14400\nassert car_race_collision(167) == 27889"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [num + 1 for num in l]\n\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert pairs_sum_to_zero([1, 3, 5, 0]) == False\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\nassert pairs_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nassert triangle_area(5, 3) == 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n\nassert fib4(5) == 4\nassert fib4(6) == 8\nassert fib4(7) == 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    return (l[n//2] + l[(n-1)//2]) / 2 if n % 2 == 0 else l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)\n\nassert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):   \n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')\n\nassert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)\n\nassert below_threshold([1, 2, 4, 10], 100) == True\nassert below_threshold([1, 20, 4, 10], 5) == False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\n\n\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\n# Test cases\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for i in range(3, n+1):\n        fib = a + b + c\n        a, b, c = b, c, fib\n    \n    return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiou') + (1 if s[-1].lower() == 'y' else 0)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[-2])\n    mangoes = n - apples - oranges\n    return mangoes\n\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\",3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\",120) == 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_index = i\n        elif node % 2 == 0 and node == smallest_even and i < smallest_index:\n            smallest_index = i\n    return [] if smallest_even == float('inf') else [smallest_even, smallest_index]\n\nassert pluck([4,2,3]) == [2, 1]\nassert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    unique_values = set(lst)\n    result = -1\n    for val in unique_values:\n        if lst.count(val) >= val:\n            result = max(result, val)\n    return result if result > 0 else -1\n\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-i-1]:\n            changes += 1\n    return changes\n\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum([len(s) for s in lst1]) <= sum([len(s) for s in lst2]) else lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n**round(n**(1/x))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    a = abs(a)\n    i = 0\n    while i**3 < a:\n        i += 1\n    return i**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {2, 3, 5, 7, 11, 13}\n    count = sum(int(d, 16) in primes for d in num if d in '0123456789ABCDEF')\n    return count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'\n\nassert decimal_to_binary(15) == \"db1111db\"\nassert decimal_to_binary(32) == \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2) if len(s) >= 3)"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g > 0.0 else 'E' for g in grades]"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 2 * (9 * 10**(n-2)) + 9 * 10**(n-1)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n\nassert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))  # Sort by rows in ascending order and columns in descending order\n    return result\n\n# Test cases\nassert get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    arr = array[:]\n    if len(arr) < 2:\n        return arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join([chr(((ord(c) - ord('a') + 2 * 2) % 26) + ord('a')) if c.islower() else c for c in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_nums = sorted(set(lst))\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return sum(1 for sentence in re.split(\"[.!?]\", S) if sentence.strip().startswith(\"I\"))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return ((isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and \n            (x == y + z or y == x + z or z == x + y))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels_mapping:\n                encoded_message += vowels_mapping[char.lower()].upper() if char.islower() else vowels_mapping[char.lower()]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    largest_prime = max(prime_values)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\nassert count_up_to(5) == [2, 3]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = set('AEIOU')\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value - int(value) >= 0.5:\n        return int(value) + 1\n    elif value - int(value) <= -0.5:\n        return int(value) - 1\n    else:\n        return int(value)\n\n# Test cases\nassert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[-1] + (2 if n % 2 == 0 else 2))\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max(i for i in range(x, y + 1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y + 1)) else -1\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)\n\n\nassert even_odd_palindrome(12) == (4, 6)\nassert even_odd_palindrome(3) == (1, 2)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) if d != '-' else -int(num[1]) for d in str(num) if d.isdigit()) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return any(arr == sorted_arr[i:] + sorted_arr[:i] for i in range(len(arr)))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x in lst1 if x % 2 == 1) <= sum(1 for x in lst2 if x % 2 == 0) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    result = {}\n    max_count = 0\n    \n    for letter in test.split():\n        result[letter] = result.get(letter, 0) + 1\n        max_count = max(max_count, result[letter])\n\n    return {key: value for key, value in result.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for c in s if int(c) % 2 != 0), sum(1 for c in s if int(c) % 2 != 0), sum(1 for c in s if int(c) % 2 != 0), sum(1 for c in s if int(c) % 2 != 0)) for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_buckets = 0\n    for row in grid:\n        for well in row:\n            total_buckets += well\n            \n    return -(-total_buckets // capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = [word for word in words if sum(1 for letter in word if letter.lower() not in 'aeiou') == n]\n    return result\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    count = 0\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            count += 1\n        else:\n            if count == 0:\n                return 'No'\n            count -= 1\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if abs(num) < 100)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    numbers = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        numbers.append(n)\n    \n    return sorted(list(set([num for num in numbers if num % 2 == 1])))\n\nassert get_odd_collatz(5) == [1, 5]\nassert get_odd_collatz(1) == [1]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    \n    return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start_intersection = max(interval1[0], interval2[0])\n    end_intersection = min(interval1[1], interval2[1])\n    \n    if start_intersection > end_intersection:\n        return \"NO\"\n    \n    length_intersection = end_intersection - start_intersection\n    if length_intersection < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length_intersection ** 0.5) + 1):\n        if length_intersection % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    flat_grid = [cell for row in grid for cell in row]\n    start_val = min(flat_grid)\n    min_path = [start_val]\n    current_cell = flat_grid.index(start_val)\n    \n    while len(min_path) < k:\n        neighbors = []\n        x, y = current_cell // n, current_cell % n\n        \n        if x > 0:\n            neighbors.append((x - 1) * n + y)\n        if x < n - 1:\n            neighbors.append((x + 1) * n + y)\n        if y > 0:\n            neighbors.append(x * n + y - 1)\n        if y < n - 1:\n            neighbors.append(x * n + y + 1)\n        \n        min_neighbor = min(neighbors, key=lambda cell: flat_grid[cell])\n        min_path.append(flat_grid[min_neighbor])\n        current_cell = min_neighbor\n        \n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_seq = [3]\n    a, b, c = 0, 1, 1\n    for i in range(n):\n        tribonacci_seq.append(a)\n        a, b, c = b, c, a + b + c\n    return tribonacci_seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return product if has_odd_digit else 0\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    count = 0\n    nested = False\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']' and count > 0:\n            count -= 1\n            nested = True\n    return nested"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    import math\n    return sum(math.ceil(num)**2 for num in lst)\n\nassert sum_squares([1,2,3])==14\nassert sum_squares([1,4,9])==98\nassert sum_squares([1,3,5,7])==84\nassert sum_squares([1.4,4.2,0])==29\nassert sum_squares([-2.4,1,1])==6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return bool(txt.rstrip() and txt.rstrip()[-1].isalpha()) and txt.rstrip()[-1] not in set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    last_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            last_index = i\n    return last_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n  \n    return (max(neg_ints) if neg_ints else None, min(pos_ints) if pos_ints else None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = a.replace(',', '.')\n    if isinstance(b, str) and ',' in b:\n        b = b.replace(',', '.')\n\n    if a == b:\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    \n    return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n\n# Test case\nassert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    new_text = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char != \"-\" and prev_char != \"_\":\n                new_text += \"_\"\n        elif char != \" \":\n            new_text += char\n        prev_char = new_text[-1] if new_text else \"\"\n    return new_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    count_digits = sum(c.isdigit() for c in file_name)\n    parts = file_name.split('.')\n    if count_digits <= 3 and len(parts) == 2 and parts[0] and parts[0][0].isalpha() and parts[1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(words):\n        prime_words = []\n        for word in words.split():\n            if is_prime(len(word)):\n                prime_words.append(word)\n        return ' '.join(prime_words)\n\n    return get_prime_words(sentence)\n\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x) if x != 0 else abs(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple([planet for planet in planets[start_idx+1:end_idx]])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    is_prime = n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\n    return x if is_prime else y\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) if lst else 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"\n\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n\nassert cycpattern_check(\"abcd\",\"abd\") == False\nassert cycpattern_check(\"hello\",\"ell\") == True\nassert cycpattern_check(\"whassup\",\"psus\") == False\nassert cycpattern_check(\"abab\",\"baa\") == True\nassert cycpattern_check(\"efef\",\"eeff\") == False\nassert cycpattern_check(\"himenss\",\"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    conversion_table = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'),\n                        (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    \n    roman_numeral = ''\n    for value, numeral in conversion_table:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral.lower()\n\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = min(need, remaining) + number\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    exp = str(operand[0])\n    for i in range(len(operator)):\n        exp += operator[i] + str(operand[i + 1])\n    return eval(exp)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            new_s += char.swapcase()\n        else:\n            new_s += char\n    if not any(char.isalpha() for char in s):\n        return new_s[::-1]\n    return new_s"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [int(i) for i in range(a, b+1) if any(int(x) % 2 == 0 for x in str(i) if x != '0')]"}
