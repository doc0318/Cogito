{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []  # Stack to keep track of opening parentheses\n    groups = []  # List to store separate groups of parentheses\n    current_group = \"\"  # Current group being formed\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    groups.append(current_group)\n                    current_group = \"\"\n            else:\n                # Unbalanced parentheses, handle accordingly (e.g., raise exception or return error message)\n                pass\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x for item in numbers for x in (item, delimeter)][:-1]\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    \n    return result\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        max_value = max(numbers[:i+1])\n        result.append(max_value)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if string == \"\":\n        return \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(['0' if i != j else '1' for i, j in zip(a, b)])\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    max_length = len(strings[0]) if strings else None\n    longest_string = strings[0] if strings else None\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\nimport re\n\ndef parse_music(music_string: str) -> List[int]:\n    return [4 if m == 'o' else 2 if m == 'o|' else 1 for m in re.findall(r'[o|.]', music_string)]\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i] == substring[0]:\n            match = True\n            for j in range(1, len(substring)):\n                if string[i + j] != substring[j]:\n                    match = False\n                    break\n            if match:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if is_divisible(n, i):\n            return False\n    return True\n\ndef is_divisible(a, b):\n    return a % b == 0\n"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    a, b = -10, 10\n    epsilon = 1e-6\n\n    while abs(b - a) > epsilon:\n        c = (a + b) / 2\n        if poly(xs, c) == 0 or (poly(xs, a) * poly(xs, c) < 0 and poly(xs, c) * poly(xs, b) < 0):\n            return c\n        elif poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n\n    return (a + b) / 2\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    l_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [l_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [l[i] if i % 2 else even.pop(0) for i in range(len(l))]\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2: return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0: return False\n    return True\n\nfibs = [0, 1]\nwhile len([f for f in fibs if is_prime(f)]) != n:\n    fibs.append(fibs[-1] + fibs[-2])\nreturn fibs[-1]\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if l[i] > 0:\n            break\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    collision_count = 0\n    for i in range(n-1, -1, -1):\n        if i == n - i - 1:\n            collision_count += 1\n    return collision_count\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [i+1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base >= 10:\n        raise ValueError(\"Base must be less than 10\")\n    \n    result = \"\"\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    \n    return result if result else \"0\"\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Length of side and height must be positive numbers\")\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    dp = [0, 0, 2, 0] + [0]*max(0, n-3)\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]\n"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 0:\n        middle1 = sorted_list[length // 2 - 1]\n        middle2 = sorted_list[length // 2]\n        return (middle1 + middle2) / 2\n    else:\n        return sorted_list[length // 2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return (2 ** n) % p\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Step 1: Check if the lengths of the strings are equal\n    if len(s0) != len(s1):\n        return False\n\n    # Step 2: Convert the strings into sets of characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    # Step 3: Compare the two sets\n    return set_s0 == set_s1\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == \"<\":\n            counter += 1\n        elif char == \">\":\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1: return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]: decreasing = False\n        elif l[i] < l[i - 1]: increasing = False\n    if increasing and decreasing: return False\n    if increasing or decreasing: \n        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]: return False\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    sorted_common_elements = sorted(list(common_elements))\n    return sorted_common_elements\n"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    open_brackets = 0\n    for char in brackets:\n        if char == '(':\n            open_brackets += 1\n        elif char == ')':\n            open_brackets -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs)][1:]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    memo = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        memo.append(memo[i-1] + memo[i-2] + memo[i-3])\n    \n    return memo[n]\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    return sum(1 for c in s.lower() if c in 'aeiouy')\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    part1 = str_x[:shift]\n    part2 = str_x[shift:]\n    result = part2[::-1] + part1[::-1]\n    return result\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    return n - sum(int(i) for i in s.split() if i.isdigit())\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = None\n    min_index = None\n    \n    for idx, val in enumerate(arr):\n        if val % 2 == 0:  # Check if the value is even\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = idx\n                \n    if min_even is None:\n        return []\n    else:\n        return [min_even, min_index]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    count = [0]*1001\n    for num in lst:\n        count[num] += 1\n    for i in range(1000, 0, -1):\n        if count[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n\n    while left <= right:\n        if arr[left] != arr[right]:\n            if arr[left] == arr[right - 1] or arr[left + 1] == arr[right]:\n                changes += 1\n                if arr[left] == arr[right - 1]:\n                    arr[right] = arr[left]\n                else:\n                    arr[left] = arr[right]\n            else:\n                changes += 1\n                arr[left] = arr[right]\n        left += 1\n        right -= 1\n\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    return lst1 if total1 < total2 else lst2\n"}
{"task_id": "HumanEval/75", "completion": "def generate_primes(n):\n    \"\"\"Generate all prime numbers up to n.\"\"\"\n    primes = []\n    for possiblePrime in range(2, n + 1):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a is the multiplication of 3 prime numbers.\"\"\"\n    primes = generate_primes(100)\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    log = math.log(x, n)\n    return round(log) == log\n"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    return round(math.pow(abs(a), 1/3))**3 == abs(a)\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit.upper() in prime_hex)\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    binary = 'db' + binary + 'db'  # Add 'db' characters at the beginning and end\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s) - 2))\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return 2*9*10**(n-2) if n > 1 else 0\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(d) for d in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 == 0 and i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j in range(len(row)) if row[j] == x], key=lambda t: (t[0], -t[1]))\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array: return []\n    return sorted(array, reverse=sum(array[:1])%2)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - start - 2*2) % 26 + start)\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return len(re.findall(r'\\bI\\b', S))\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                if char in 'AEIOU':\n                    result += chr(ord(char) + 2).upper()\n                else:\n                    result += chr(ord(char) + 2).lower() if char != 'Y' else 'A'\n            else:\n                if char in 'aeiou':\n                    result += chr(ord(char) + 2).lower()\n                else:\n                    result += chr(ord(char) + 2).upper() if char != 'y' else 'A'\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes) if primes else None\n    return sum_of_digits(largest_prime) if largest_prime is not None else 0\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n\n    lowercase = True\n    uppercase = True\n\n    for key in d.keys():\n        if not isinstance(key, str):\n            return False\n        elif key.islower() or key.isupper():\n            continue\n        else:\n            lowercase = False\n            uppercase = False\n            break\n\n    return lowercase or uppercase\n"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        if is_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    number = float(value)\n    return int(number + 0.5) if number > 0 else int(number - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if i % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.findall(r'\\b\\w+\\b', s)\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    # Start from the largest number in the range and go downwards\n    for i in range(y, x-1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    # If no even number was found, return -1\n    return -1\n```\n\nThis function iterates from the larger end of the range down to the smaller end (inclusive). It checks each number to see if it is even. As soon as it finds an even number, it returns that number. If it doesn't find any even numbers, it returns -1."}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if all(int(d)%2!=0 for d in str(i))])\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    sorted_arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [num_to_word[i] for i in sorted_arr]\n."}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if number is palindrome\n            if i % 2 == 0:  # Check if number is even\n                even += 1\n            else:  # Number is odd\n                odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        num = abs(num)\n        sum_of_digits = sum(int(char) for char in str(num))\n        if sum_of_digits > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != arr_sorted[i] and (arr_sorted[i] - arr[i] != 1 or i != len(arr) - 1):\n            return False\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return \"YES\" if all(i % 2 == 0 for i in lst1) or any(i % 2 != 0 for i in lst2) else \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    words = test.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    max_count = max(freq.values())\n    result = {k: v for k, v in freq.items() if v == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d)%2 for d in s)}n the string {i} of the input.\" for i, s in enumerate(lst, 1)]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_drops = 0\n    for row in grid:\n        if sum(row) > 0:\n            total_drops += 1\n    return total_drops * capacity\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    \n    for i in range(len(word) - 2, 0, -1):  # Start from second last character\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    while '()' in s:\n        s = s.replace('()', '')\n    return 'Yes' if not s else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    result.append(1)\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = map(int, parts)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if (ord(char) - 96) % 2 == 1:\n                    count += 1\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and len(lst) == len(set(lst))\n"}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sum_magnitude = 0\n    product_signs = 1\n\n    for num in arr:\n        sum_magnitude += abs(num)\n\n        if num == 0:\n            product_signs = 0\n            break\n        elif num < 0:\n            product_signs *= -1\n\n    return sum_magnitude * product_signs\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    min_path = []\n    for i in range(N):\n        for j in range(N):\n            visited = {(i, j)}\n            dfs(i, j, [grid[i][j]], 1, visited)\n    \n    return min_path\n\nimport heapq\n\ndef dfs(x, y, path, steps, visited):\n    if steps == k:\n        nonlocal min_path\n        if len(path) < len(min_path):\n            min_path = path[:]\n        return\n    \n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n            visited.add((nx, ny))\n            path.append(grid[nx][ny])\n            dfs(nx, ny, path, steps + 1, visited)\n            visited.remove((nx, ny))\n            path.pop()\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        tri_sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tri_sequence.append(1 + i / 2)\n            else:\n                tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + tri_sequence[i + 1])\n        return tri_sequence\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        num = int(digit)\n        if num % 2 != 0:\n            product *= num\n    return product if product != 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip() and not txt.strip()[-1].isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        return None\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    i = 0\n    while i < n:\n        j = i + 2\n        while j < n:\n            k = j + 2\n            while k < n:\n                l = k + 2\n                if l == n:\n                    return True\n                elif l > n:\n                    break\n                else:\n                    k += 2\n            if k >= n:\n                k = j + 2\n                j += 2\n        if j >= n:\n            j = i + 2\n            i += 2\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer greater than 0.\"\n    \n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    \n    return result\n"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = re.sub(' +', '_', text)\n    text = re.sub('_+', '-', text)\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3 else 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum([x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i, x in enumerate(lst)])\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    return ' '.join(word for word in words if is_prime(len(word)))\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (str(num)[0] in ['1', '3', '5', '7', '9']) and (str(num)[-1] in ['1', '3', '5', '7', '9']):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index_planet1 = planets.index(planet1)\n    index_planet2 = planets.index(planet2)\n    \n    if index_planet1 > index_planet2:\n        index_planet1, index_planet2 = index_planet2, index_planet1\n    \n    return tuple(planets[index_planet1 + 1:index_planet2])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a-b) for a, b in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda ext: sum(c.isupper() for c in ext) - sum(c.islower() for c in ext))\n    return f\"{class_name}.{strongest}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in (a + a)[i:i + len(b)]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    return sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0), sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    if number < 1 or number > 1000:\n        raise ValueError(\"Input number must be between 1 and 1000\")\n\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            number -= value\n            result += roman_numerals[value]\n\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of squares of the first two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    result = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n        elif unique_chars == max_unique_chars:\n            if word < result:\n                result = word\n\n    return result\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number >= need:\n        return [number, 0]\n    else:\n        eat_more = min(remaining, need - number)\n        return [number + eat_more, remaining - eat_more]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s])\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    md5_digest = md5_hash.hexdigest()\n\n    return md5_digest\n"}
