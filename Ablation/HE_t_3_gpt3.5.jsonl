{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    opened = 0\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            opened += 1\n            current_group += char\n        elif char == ')':\n            opened -= 1\n            current_group += char\n            if opened == 0:\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result\n\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return abs(number) % 1\n\nassert truncate_number(3.5) == 0.5"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\nassert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        count = 0\n        max_depth = 0\n        for char in group:\n            if char == \"(\":\n                count += 1\n            elif char == \")\":\n                count -= 1\n            max_depth = max(max_depth, count)\n        result.append(max_depth)\n    return result\n\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n\nassert filter_by_substring([], 'a') == []\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result\n\n# Test cases\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_values = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_values.append(current_max)\n    return max_values\n\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = 0\n    max_string = None\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n\n    return max_string\n\nassert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\n# Test cases\nassert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for char in string:\n        prefix += char\n        prefixes.append(prefix)\n    return prefixes\n\nassert all_prefixes('abc') == ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = ' '.join(map(str, range(n+1)))\n    return result\n\nassert string_sequence(0) == '0'\nassert string_sequence(5) == '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(c.lower() for c in string))\n\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    legend = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    result = [legend[note] for note in notes]\n\n    return result\n\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\nassert how_many_times('', 'a') == 0\nassert how_many_times('aaa', 'a') == 3\nassert how_many_times('aaaa', 'aa') == 3"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                   'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    \n    nums = [word_to_num[word] for word in numbers.split()]\n    sorted_nums = sorted(nums)\n    sorted_words = [num_to_word[num] for num in sorted_nums]\n    \n    return ' '.join(sorted_words)\n\n\n# Test Case\nassert sort_numbers('three one five') == 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n\n\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n        \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    scaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    return scaled_numbers\n\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\nassert strlen('') == 0\nassert strlen('abc') == 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n\nassert largest_divisor(15) == 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor:\n            divisor += 1\n        else:\n            n //= divisor\n            factors.append(divisor)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n\nassert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]\nassert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef find_zero(xs):\n    for i in range(len(xs)-1):\n        if xs[i] != 0:\n            return -xs[i] / xs[i+1] if xs[i+1] != 0 else None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_values = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_values.sort()\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted_values.pop(0)\n    \n    return l\n\nassert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nassert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return [v if i % 2 == 1 else sorted(l[::2])[i//2] for i, v in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)\n\n\n# Test cases\nassert decode_cyclic(encode_cyclic('abc')) == 'abc'\nassert decode_cyclic(encode_cyclic('abcabc')) == 'abcabc'"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n\n    return fibonacci(num)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nassert triples_sum_to_zero([1, 3, 5, 0]) == False\nassert triples_sum_to_zero([1, 3, -2, 1]) == True\nassert triples_sum_to_zero([1, 2, 3, 7]) == False\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\nassert triples_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    result = []\n    for element in l:\n        result.append(element + 1)\n    return result\n\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\nassert pairs_sum_to_zero([1, 3, 5, 0]) == False\nassert pairs_sum_to_zero([1, 3, -2, 1]) == False\nassert pairs_sum_to_zero([1, 2, 3, 7]) == False\nassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\nassert pairs_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n\nassert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return round(0.5 * a * h, 1)"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    fib_seq = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4])\n    return fib_seq[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    l.sort()\n    mid = n // 2\n    return l[mid] if n % 2 != 0 else (l[mid - 1] + l[mid]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)\n\nassert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\nassert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nassert add(2, 3) == 5\nassert add(5, 7) == 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nassert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False\n\nassert monotonic([1, 2, 4, 20]) == True\nassert monotonic([1, 20, 4, 10]) == False\nassert monotonic([4, 1, 0, -10]) == True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2\n\nassert sum_to_n(30) == 465\nassert sum_to_n(100) == 5050\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(1) == 1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set('aeiouAEIOU')\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift] if shift > 0 else x_str\n\nassert circular_shift(12, 1) == \"21\"\nassert circular_shift(12, 2) == \"12\"\nassert circular_shift(12345, 3) == \"34512\"\nassert circular_shift(9876, 6) == \"6789\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_uppercase = 0\n    for c in s:\n        if c.isupper():\n            sum_uppercase += ord(c)\n    return sum_uppercase\n\n# Test cases\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)\n\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = float('inf')\n    \n    for idx, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_value:\n            smallest_value = val\n            smallest_index = idx\n        elif val % 2 == 0 and val == smallest_value:\n            smallest_index = min(smallest_index, idx)\n    \n    return [smallest_value, smallest_index] if smallest_value != float('inf') else []\n\nassert pluck([4,2,3]) == [2, 1]\nassert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    for key in sorted(freq_dict.keys(), reverse=True):\n        if key > 0 and freq_dict[key] >= key:\n            return key\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    lst.sort()\n    left = 0\n    right = len(lst) - 1\n    result = []\n\n    while left <= right:\n        result.append(lst[left])\n        if left != right:\n            result.append(lst[right])\n        left += 1\n        right -= 1\n\n    return result\n\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    midpoint = len(arr) // 2\n    for i in range(midpoint):\n        if arr[i] != arr[-i-1]:\n            changes += 1\n    return changes\n\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n**round(n**(1/x))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    \n    num = abs(a)\n    root = round(num**(1/3))\n    \n    return root**3 == num\n\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    prime_count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    return prime_count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\"\n\nassert decimal_to_binary(15) == \"db1111db\"\nassert decimal_to_binary(32) == \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades\n\n# Test the function with the provided sample test case\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n\nassert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word, key=lambda x: ord(x))) for word in s.split()])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in sorted(enumerate(row, key=lambda x: x[1], reverse=True) if val == x], key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    copied_array = array[:]\n    first_last_sum = (copied_array[0] if copied_array else 0) + (copied_array[-1] if copied_array else 0)\n    return sorted(copied_array, reverse=first_last_sum % 2 == 0)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha() and char.islower():\n            index = (alphabet.index(char) + (2 * 2)) % 26\n            result += alphabet[index]\n        else:\n            result += char\n    return result\n\nassert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for item in sentences for sentence in item.split('?')]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n\n            if char in vowels:\n                index = ord(char) - ord('A') if char.isupper() else ord(char) - ord('a')\n                new_index = (index + 2) % 26\n                char = chr(ord('A') + new_index) if char.isupper() else chr(ord('a') + new_index)\n        \n        encoded_message += char\n        \n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)], default=-1)\n    return sum(int(digit) for digit in str(largest_prime))\n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower = all(key.islower() for key in dict if isinstance(key, str) and key.isalpha())\n    upper = all(key.isupper() for key in dict if isinstance(key, str) and key.isalpha())\n    return lower == True or upper == True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones_per_level = [n]\n    current_stones = n\n    for i in range(1, n):\n        if current_stones % 2 == 0:\n            current_stones += 1\n        else:\n            current_stones += 2\n        stones_per_level.append(current_stones)\n    return stones_per_level\n\nassert make_a_pile(3) == [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    import re\n    return [word for word in re.split(r'[,\\s]', s) if word]\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    avg = total_sum / (m - n + 1)\n    \n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr = sorted(arr)\n    arr.reverse()\n\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [num_to_name[num] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count) \n\nassert even_odd_palindrome(12) == (4, 6)\nassert even_odd_palindrome(3) == (1, 2)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n\nassert move_one_ball([3, 4, 5, 1, 2])==True\nassert move_one_ball([3, 5, 4, 1, 2])==False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if odd_count_lst1 > even_count_lst2:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    characters = test.split()\n    char_counts = {}\n    for char in characters:\n        char_counts[char] = char_counts.get(char, 0) + 1\n    max_count = max(char_counts.values(), default=0)\n    max_chars = [char for char, count in char_counts.items() if count == max_count]\n    return {char: count for char, count in char_counts.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    new_str = ''.join([char for char in s if char not in c])\n    is_palindrome = new_str == new_str[::-1]\n    return new_str, is_palindrome,"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_moves = 0\n    for row in grid:\n        total_water_units = sum(row)\n        total_moves += -(-total_water_units // capacity)\n\n    return total_moves"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = [word for word in words if sum(1 for letter in word if letter.lower() not in 'aeiou') == n]\n    return result\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    for i in range(len(word)-3, 0, -1):\n        if word[i] in consonants:\n            for j in range(i-1, 0, -1):\n                if word[j] in vowels:\n                    for k in range(j+1, i):\n                        if word[k] in consonants:\n                            return word[j]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def check(candidate):\n        stack = []\n        for c in candidate:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n    \n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_odd_in_even_position = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            sum_odd_in_even_position += num\n    return sum_odd_in_even_position\n\nassert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30, 13, 24, 321]) == 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_elements = 0\n    for num in arr[:min(k, len(arr))]:\n        if -99 < num < 100:\n            sum_elements += num\n    return sum_elements\n\nassert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n    \n    for num in collatz_seq(n):\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    if not date.count('-') == 2:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False\n\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])\n\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i] <= lst[i+1] for i in range(len(lst)-1)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start\n\n    if length < 2:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n    magnitude_sum = sum(abs(num) for num in arr)\n    return magnitude_sum * sign_product\n\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    min_path = list(range(1, N**2 + 1))\n    \n    def backtrack(cell, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = cell[0] + dx, cell[1] + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                backtrack((nx, ny), path + [grid[nx][ny]])\n    \n    for i in range(N):\n        for j in range(N):\n            backtrack((i, j), [grid[i][j]])\n    \n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_sequence = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n    tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n    return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        num = int(digit)\n        if num % 2 != 0:\n            has_odd_digit = True\n            odd_product *= num\n    return odd_product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    bracket_count = 0\n    for char in string:\n        if char == \"[\":\n            bracket_count += 1\n        elif char == \"]\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, (int, float)):\n            total += (int(num) + (num > int(num)))**2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    res = -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            res = i\n            break\n    return res\n\n# Test cases\nassert can_arrange([1,2,4,3,5]) == 3\nassert can_arrange([1,2,3]) == -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b = float(b.replace(',', '.')) if isinstance(b, str) else b\n    return a if a > b else b if a != b else None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 8 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result\n\nassert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-1] + \"-\"\n                consecutive_spaces = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No'\n    \n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum([num**2 if i % 3 == 0 else num**3 if i % 4 == 0 and i % 3 != 0 else num for i, num in enumerate(lst)])"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    return ' '.join(word for word in words if is_prime(len(word)))\n\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    product_num = num_x * num_n\n    product_den = den_x * den_n\n    \n    return product_num % product_den == 0\n\nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)) if nums else [])"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nassert get_max_triples(5) == 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx < end_idx:\n        return tuple(sorted([p for p in planets[start_idx + 1:end_idx]], key=lambda x: planets.index(x)))\n    else:\n        return tuple(sorted([p for p in planets[end_idx + 1:start_idx]], key=lambda x: planets.index(x)))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        \n        if strength > strongest_strength:\n            strongest_extension = ext\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(a)):\n        if b in a[i:] + a[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    \n    for digit in num_str:\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Test cases\nassert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    mapping = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', \n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc', \n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', \n        1000: 'm'\n    }\n    \n    result = \"\"\n    \n    for key in sorted(mapping.keys(), reverse=True):\n        while number >= key:\n            result += mapping[key]\n            number -= key\n\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2\n\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    result = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_count = count_unique_chars(word)\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < result):\n            max_unique_count = unique_count\n            result = word\n\n    return result\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total = number + need\n    left = max(remaining - total, 0)\n    return [total, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    exp = str(operand[0])\n    for i in range(len(operator)):\n        exp += operator[i] + str(operand[i + 1])\n    return eval(exp)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    has_letter = False\n    \n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n            has_letter = True\n        else:\n            result += char\n    \n    if not has_letter:\n        result = s[::-1]\n    \n    return result\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\nassert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if any(digit in ['0', '2', '4', '6', '8'] for digit in str(i))] if a < b else []"}
