{"task_id": "HumanEval/0", "completion": "import functools\n\ndef asc_desc_ending(input_string):\n    input_lines = input_string.strip().split(\"\\n\")\n    n, m = [int(i) for i in input_lines[0].split()]\n    strings = [strng for strng in input_lines[1:]]\n\n    def comparator(strng1, strng2):\n        for i in range(m):\n            if i % 2 == 0:\n                if strng1[i] < strng2[i]:\n                    return -1\n                elif strng1[i] > strng2[i]:\n                    return 1\n            else:\n                if strng1[i] < strng2[i]:\n                    return 1\n                elif strng1[i] > strng2[i]:\n                    return -1\n        return 0\n\n    sorted_strings = sorted(range(1,n+1), key=functools.cmp_to_key(lambda x, y: comparator(strings[x-1], strings[y-1]))) \n    return ' '.join(map(str, sorted_strings)) + \"\\n\" \n"}
{"task_id": "HumanEval/1", "completion": "\nimport math\n\ndef min_radius_for_park(data):\n    n_k, *coordinates = data.split()\n    n, k = map(int, n_k.split())\n  \n    habitats = [tuple(map(int, x.split())) for x in coordinates]\n    habitats.sort(key=lambda xy: xy[0]**2 + xy[1]**2)\n    \n    l, r = 0, 2e5\n    while r-l > 1e-7:\n        m = (r+l) / 2\n        if sum(1 for xy in habitats if xy[0]**2 + xy[1]**2 <= m**2) >= k:\n            r = m\n        else:\n            l = m\n\n    return f\"{l:.9f}\"\n\n"}
{"task_id": "HumanEval/2", "completion": "def solve(input_str):\n\n    args = input_str.strip().split()\n    n, m, k = map(int, args[:3])\n    a = list(map(int, args[3:]))\n\n    MOD = 10**9 +7\n    b = a * min(2, m)\n    prefix = [0] * (2*n+1)\n    dp = [0] * (2*n+1)\n    prefix[0] = 1\n    ans = idx = summ = 0\n    for i in range(1, len(b)+1):\n        summ = (summ+b[i-1])%k\n        while idx < min(i-1, n):\n            idx += 1\n            dp[idx] = (dp[idx-1]+b[idx-1])%k\n            prefix[dp[idx]] += 1\n        if i > n:\n            dp[i-n-1] = (dp[i-n]+b[i-n-1])%k\n            prefix[dp[i-n-1]] -= 1\n        ans = (ans+prefix[summ])%MOD\n    return str(ans)\n\n"}
{"task_id": "HumanEval/3", "completion": "def possible_numbers(s):\n    if 'X' in s:\n        t = s.replace('X', '_')\n        cnt = 0\n        for digit in range(10):\n            temp = t.replace('_', str(digit))\n            while temp[0] == '0' and len(temp) > 1:\n                temp = temp[1:]\n            if temp[-2:] in ['00', '25', '50', '75']:\n                cnt += 1\n        return cnt\n    else:\n        cnt = 0\n        for i in range(10):\n            for j in range(10):\n                temp = s\n                while temp[0] == '0' and len(temp) > 1:\n                    temp = temp[1:]\n                if temp[-2:] in ['00', '25', '50', '75']:\n                    cnt += 1\n        return cnt\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [delimeter] * (2 * len(numbers) - 1)\n    result[::2] = numbers\n    return result\n\n# Test cases\nassert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths\n\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_values = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_values.append(max(max_values[-1], numbers[i]))\n    \n    return max_values\n\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    rev = string[::-1]\n    for i in range(len(string)):\n        if string[i:] == rev[:len(string) - i]:\n            return string + rev[len(string) - i:]\n\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n\nassert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\nassert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n\n\nassert all_prefixes('abc') == ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "NUMBERS = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n    'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    return ' '.join(sorted(numbers.split(), key=lambda x: NUMBERS[x]))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair\n\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    unique = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique.append(num)\n    return unique\n\n# Test cases\nassert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        return -xs[-2] / xs[-1]\n    return None\n\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in divisible_by_three])\n    \n    for i, val in zip(divisible_by_three, sorted_values):\n        l[i] = val\n    \n    return l\n\nassert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max_val = None\n    for num in l:\n        if max_val is None or num > max_val:\n            max_val = num\n    return max_val\n\nassert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(str(num).count('7') for num in range(1, n) if num % 11 == 0 or num % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    result = [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\nassert sort_even([1, 2, 3]) == [1, 2, 3]\nassert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    def fibonacci_number(k):\n        if k <= 1:\n            return k\n        else:\n            return fibonacci_number(k-1) + fibonacci_number(k-2)\n\n    count = 0\n    num = 2\n    while count < n:\n        fib_num = fibonacci_number(num)\n        if is_prime(fib_num):\n            count += 1\n        num += 1\n    return fib_num\n\n# Test cases\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nassert triples_sum_to_zero([1, 3, 5, 0]) == False\nassert triples_sum_to_zero([1, 3, -2, 1]) == True\nassert triples_sum_to_zero([1, 2, 3, 7]) == False\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\nassert triples_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base >= 10:\n        raise ValueError(\"Base must be less than 10.\")    \n    result_str = \"\"\n    while x > 0:\n        remainder = x % base\n        result_str = str(remainder) + result_str\n        x //= base    \n    return result_str\n\nassert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2\n\nassert triangle_area(5, 3) == 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\nassert fib4(5) == 4\nassert fib4(6) == 8\nassert fib4(7) == 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\nassert decode_shift(encode_shift('abc')) == 'abc'\nassert decode_shift(encode_shift('abcabc')) == 'abcabc'"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nassert add(2, 3) == 5\nassert add(5, 7) == 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    char_count_s0 = {}\n    char_count_s1 = {}\n    \n    for char in s0:\n        char_count_s0[char] = char_count_s0.get(char, 0) + 1\n    \n    for char in s1:\n        char_count_s1[char] = char_count_s1.get(char, 0) + 1\n    \n    return char_count_s0 == char_count_s1\n\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert same_chars('abcd', 'dddddddabc') == True\nassert same_chars('dddddddabc', 'abcd') == True\nassert same_chars('eabcd', 'dddddddabc') == False\nassert same_chars('abcd', 'dddddddabce') == False\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\r\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper\n\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    fruits = s.split(' ')\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges\n\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_index = float('inf')\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n        elif arr[i] % 2 == 0 and arr[i] == min_even and i < min_index:\n            min_index = i\n    if min_even == float('inf'):\n        return []\n    else:\n        return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    num_freq = {}\n    for num in lst:\n        if num > 0:\n            if num in num_freq:\n                num_freq[num] += 1\n            else:\n                num_freq[num] = 1\n    \n    result = -1\n    for key, value in num_freq.items():\n        if value >= key:\n            result = max(result, key)\n    \n    return result\n\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    import math\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2 if count2 < count1 else lst1\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\n\ndef is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, 100) if is_prime(num)]\n    \n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    \n    return False\n\nassert is_multiply_prime(30) == True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return True\n    power = 0\n    while n**power < x:\n        power += 1\n        if n**power == x:\n            return True\n    return False\n\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    if a == 0:\n        return True\n    if a < 0:\n        return iscube(-a)\n    root = round(math.pow(a, 1/3))\n    return root ** 3 == a\n\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_count = 0\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    \n    for digit in num:\n        if digit in primes:\n            prime_count += 1\n    \n    return prime_count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for GPA in grades:\n        if GPA == 4.0:\n            letter_grades.append('A+')\n        elif GPA > 3.7:\n            letter_grades.append('A')\n        elif GPA > 3.3:\n            letter_grades.append('A-')\n        elif GPA > 3.0:\n            letter_grades.append('B+')\n        elif GPA > 2.7:\n            letter_grades.append('B')\n        elif GPA > 2.3:\n            letter_grades.append('B-')\n        elif GPA > 2.0:\n            letter_grades.append('C+')\n        elif GPA > 1.7:\n            letter_grades.append('C')\n        elif GPA > 1.3:\n            letter_grades.append('C-')\n        elif GPA > 1.0:\n            letter_grades.append('D+')\n        elif GPA > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    valid_numbers = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            valid_numbers += 1\n    return valid_numbers\n\n# Test Cases\nprint(starts_one_ends(1))  # Output: 1\nprint(starts_one_ends(2))  # Output: 11\nprint(starts_one_ends(3))  # Output: 111."}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total_sum = sum(int(d) for d in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum\n\nassert solve(1000) == \"1\"\nassert solve(150) == \"110\"\nassert solve(147) == \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\nassert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = sorted(array[:])\n    if not sorted_array:\n        return []\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[4:] + alphabet[:4]\n    result = ''\n    \n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            new_char = rotated_alphabet[(ord(char) - base) % 26]\n        else:\n            new_char = char\n        result += new_char\n        \n    return result\n\nassert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_sorted_lst = sorted(list(set(lst)))\n    return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.!?]', S)\n    count = sum(1 for sentence in sentences if sentence.strip().lower().startswith(\"i \"))\n    return count\n\nassert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    nums = [x, y, z]\n    for i in range(3):\n        for j in range(i+1, 3):\n            if isinstance(nums[i], int) and isinstance(nums[j], int) and nums[i] == nums[j] + nums[3-i-j]:\n                return True\n    return False\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"aeiou\"\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = (ord(char.lower()) - ord('a') + 2) % 26\n                new_char = chr(ord('a') + index).swapcase()\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        encoded_message += new_char\n\n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime)) \n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if all(k.islower() for k in keys if isinstance(k, str)):\n        return True\n    elif all(k.isupper() for k in keys if isinstance(k, str)):\n        return True\n    else:\n        return False\n\nassert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\nassert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\nassert check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) == False\nassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\nassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True."}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n\nassert count_up_to(5) == [2,3]\nassert count_up_to(11) == [2,3,5,7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2,3,5,7,11,13,17,19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    decimal = num % 1\n    if decimal < 0.5:\n        return int(num)\n    elif decimal > 0.5:\n        return int(num) + 1\n    else:\n        return int(num) - 1 if num < 0 else int(num) + 1\n\nassert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones_list = [n]\n    for i in range(1, n):\n        if stones_list[i-1] % 2 == 0:\n            stones_list.append(stones_list[i-1] + 1)\n        else:\n            stones_list.append(stones_list[i-1] + 2)\n    return stones_list"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    even_nums = [num for num in range(x, y+1) if num % 2 == 0]\n    return max(even_nums) if even_nums else -1\n\n# Test cases\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return(bin(avg))\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_dict = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_dict[num] for num in filtered]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def fact(num):\n           return 1 if num == 0 else num * fact(num - 1)\n    \n    return [fact(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\nassert f(5) == [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n): \n    def is_palindrome(num): \n        return str(num) == str(num)[:: -1] \n    even_count, odd_count = 0, 0 \n    for i in range(1, n + 1): \n        if is_palindrome(i): \n            if i % 2 == 0: \n                even_count += 1 \n            else: \n                odd_count += 1 \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            sum_digits = sum(int(d) for d in str(num)[1:] if d.isdigit())\n        else:\n            sum_digits = sum(int(d) for d in str(num) if d.isdigit())\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n\nassert move_one_ball([3, 4, 5, 1, 2]) == True\nassert move_one_ball([3, 5, 4, 1, 2]) == False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    count_even_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    return \"YES\" if count_odd_lst1 <= count_even_lst2 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {k: v for k, v in letter_count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    new_str = ''.join([char for char in s if char not in c])\n    is_palindrome = new_str == new_str[::-1]\n    return (new_str, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result\n\nassert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nassert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = min(current_sum, 0)\n    \n    return min_sum\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    bucket_lowering = 0\n    for row in grid:\n        total_water = sum(row)\n        bucket_lowering += math.ceil(total_water / capacity)\n    return bucket_lowering\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted_arr\n\nassert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\nassert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\nassert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i-2] not in vowels:\n            return word[i]\n    \n    return \"\"\n\nassert get_closest_vowel(\"yogurt\") == \"u\"\nassert get_closest_vowel(\"FULL\") == \"U\"\nassert get_closest_vowel(\"quick\") == \"\"\nassert get_closest_vowel(\"ab\") == \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = ''.join(lst)\n    balance = 0\n    \n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return 'No'\n    \n    return 'Yes'\n\n# Test cases\nassert match_parens(['(())()', '())']) == 'No'\nassert match_parens(['()(', ')']) == 'Yes'\nassert match_parens([')', ')']) == 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if -99 < x < 100])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    if n % 2 != 0:\n        odd_numbers.append(n)\n    while n != 1:\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n        if n % 2 != 0:\n            odd_numbers.append(n)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    \n    return False\n\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    unique_nums = set(lst)\n    \n    if len(unique_nums) != len(lst):\n        return False\n    \n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"\n\nassert intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        \n        sum_magnitudes += abs(num)\n\n    return product * sum_magnitudes\n\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(i, j, curr_path):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return\n        curr_path.append(grid[i][j])\n        if len(curr_path) == k:\n            paths.append(curr_path[:])\n        else:\n            dfs(i+1, j, curr_path)\n            dfs(i-1, j, curr_path)\n            dfs(i, j+1, curr_path)\n            dfs(i, j-1, curr_path)\n        curr_path.pop()\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [])\n\n    min_path = min(paths)\n    return min_path\n\nassert minPath([ [1,2,3], [4,5,6], [7,8,9] ], 3) == [1, 2, 1]\nassert minPath([ [5,9,3], [4,1,6], [7,8,2] ], 1) == [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    sequence = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-1])\n\n    return sequence\n\nassert tri(3) == [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(abs(n)):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][]') == True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)\n\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if not txt or txt[-1].isalpha():\n        return False\n    \n    for i in range(len(txt)-1, -1, -1):\n        if txt[i].isspace():\n            return True\n        if txt[i].isalpha():\n            return False\n\n    return False\n\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    max_neg = max(neg_nums) if neg_nums else None\n    min_pos = min(pos_nums) if pos_nums else None\n\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) != type(b):\n        return max((a, b), key=lambda x: type(x).__name__)\n    \n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    return a if a > b else (b if b > a else None)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\nassert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces >= 2:\n                result = result.rstrip(\"_\")  # Remove extra underscores at end\n                result += \"-\"\n                consecutive_spaces = 0\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result\n\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    if len(parts) != 2 or len(parts[0]) == 0 or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    digit_count = 0\n    for char in parts[0]:\n        if char.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n    \n    if not parts[0][0].isalpha():\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum\n\nassert sum_squares([1,2,3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1,-5,2,-1,-5]) == -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    selected_words = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            selected_words.append(word)\n    return \" \".join(selected_words)\n\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n    \n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n    \n    return product_num % product_denom == 0\n\nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n                count += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_idx = min(index1, index2)\n    end_idx = max(index1, index2)\n    \n    result = [planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2]\n    return tuple(result)\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in sorted(set(lst)) if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(num ** 2 for num in lst if isinstance(num, int) and num >= 0 and num % 2 != 0)\n\nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def_strength = lambda ext: sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    strongest_extensions = [ext for ext in extensions if def_strength(ext) == max(def_strength(ext) for ext in extensions)]\n    return f\"{class_name}.{strongest_extensions[0]}\"\n\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def rotate_word(word):\n        return [word[i:] + word[:i] for i in range(len(word))]\n    \n    for rotated_word in rotate_word(b):\n        if rotated_word in a:\n            return True\n    \n    return False\n\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    even_count = sum(1 for digit in str(num) if int(digit) % 2 == 0)\n    odd_count = len(str(num)) - even_count\n    return (even_count, odd_count)\n\nassert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value in sorted(roman_dict.keys(), reverse=True):\n        while number >= value:\n            result += roman_dict[value]\n            number -= value\n    return result\n\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a*a + b*b == c*c or b*b + c*c == a*a or a*a + c*c == b*b:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = \"\"\n    max_unique_count = 0\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_unique):\n            max_unique = word\n            max_unique_count = unique_count\n    return max_unique\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    new_str = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n        else:\n            new_str += char\n    if not has_letter:\n        return s[::-1]\n    return new_str\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]"}
