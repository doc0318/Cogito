{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    open_paren_count = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            open_paren_count += 1\n            current_group += char\n        elif char == \")\" and open_paren_count > 0:\n            open_paren_count -= 1\n            current_group += char\n            if open_paren_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n# Test cases\nassert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, depth)\n                depth -= 1\n        depths.append(max_depth)\n    return depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1 if numbers else 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product\n\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        sublist = numbers[max(0, i - 2):i+1]\n        result.append(max(sublist))\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    \n    for i in range(len(string)-1, -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]\n    \n    return string\n\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_len), None)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    output = ''\n    for i in range(n + 1):\n        if i == 0:\n            output += str(i)\n        else:\n            output += ' ' + str(i)\n    return output\n\nassert string_sequence(0) == '0'\nassert string_sequence(5) == '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\nassert how_many_times('', 'a') == 0\nassert how_many_times('aaa', 'a') == 3\nassert how_many_times('aaaa', 'aa') == 3"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    NUMERIC_WORDS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    word_to_num = {word: i for i, word in enumerate(NUMERIC_WORDS)}\n    num_to_word = {i: word for i, word in enumerate(NUMERIC_WORDS)}\n    \n    numbers_list = numbers.split()\n    sorted_numbers = sorted([word_to_num[word] for word in numbers_list])\n    \n    return ' '.join([num_to_word[num] for num in sorted_numbers])"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float(\"inf\")\n    closest_pair = ()\n    \n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val, max_val = min(numbers), max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\nassert filter_integers(['a', 3.14, 5]) == [5]\nassert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\nassert strlen('') == 0\nassert strlen('abc') == 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor\n\nassert largest_divisor(15) == 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    def get_prime_factors(num):\n        factors = []\n        d = 2\n        while d * d <= num:\n            if num % d == 0:\n                factors.append(d)\n                num //= d\n            else:\n                d += 1\n        if num > 1:\n            factors.append(num)\n        return factors\n\n    prime_factors = get_prime_factors(n)\n    factors_with_freq = []\n    for factor in prime_factors:\n        count = 0\n        while n % factor == 0:\n            count += 1\n            n //= factor\n        factors_with_freq.extend([factor] * count)\n    return factors_with_freq\n\n# Test cases\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_nums = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    for i in range(len(xs) - 1):\n        if xs[i] * xs[i + 1] < 0:\n            return -xs[i] / xs[i + 1]\n\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_vals = [(i, val) for i, val in enumerate(l) if i % 3 == 0]\n    sorted_third = [val for _, val in sorted(third_vals, key=lambda x: x[1])]\n    return [sorted_third.pop(0) if i % 3 == 0 else val for i, val in enumerate(l)]\n\nassert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\nassert fizz_buzz(50) == 0\nassert fizz_buzz(78) == 2\nassert fizz_buzz(79) == 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    result = l.copy()\n    sorted_even = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        result[i] = sorted_even.pop(0)\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    def is_fib(num):\n        a, b = 1, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n    \n    count = 0\n    num = 2\n    while count < n:\n        if is_fib(num) and is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    from itertools import combinations\n    return any(sum(combo) == 0 for combo in combinations(l, 3))"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n):\n        collisions += i\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [num + 1 for num in l]\n\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    new_num = ''\n    while x > 0:\n        remainder = x % base\n        new_num = str(remainder) + new_num\n        x = x // base\n    return new_num\n\nassert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nassert triangle_area(5, 3) == 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        new_fib = sum(fib_list)\n        fib_list.pop(0)\n        fib_list.append(new_fib)\n    return fib_list[-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 != 0:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2."}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n\nassert is_palindrome('') == True\nassert is_palindrome('aba') == True\nassert is_palindrome('aaaaa') == True\nassert is_palindrome('zbcd') == False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    result = 1\n    n_bin = bin(n)[2:]\n    \n    for bit in n_bin:\n        result = (result * result) % p\n        if bit == '1':\n            result = (result * 2) % p\n    \n    return result\n\nassert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\nassert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nassert add(2, 3) == 5\nassert add(5, 7) == 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nassert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = 2\n    divisor = 2\n\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            if is_prime(divisor):\n                max_prime = divisor\n            if is_prime(n // divisor):\n                max_prime = n // divisor\n        divisor += 1\n\n    return max_prime\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [n * a for n, a in enumerate(xs)][1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\nassert fibfib(1) == 0\nassert fibfib(5) == 4\nassert fibfib(8) == 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouyAEIOUY'\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels and (i == len(s) - 1 or char.lower() != 'y'):\n            count += 1\n    return count\n\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges\n\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_idx = float('inf')\n    \n    for idx, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_idx = idx\n        elif num % 2 == 0 and num == smallest_even and idx < smallest_even_idx:\n            smallest_even_idx = idx\n            \n    if smallest_even == float('inf'):\n        return []\n    \n    return [smallest_even, smallest_even_idx]\n\nassert pluck([4, 2, 3]) == [2, 1]\nassert pluck([1, 2, 3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    max_num = -1\n    for key, value in freq.items():\n        if key > max_num and value >= key:\n            max_num = key\n    return max_num\n\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum(len(word) for word in lst1) <= sum(len(word) for word in lst2) else lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a <= 1 or a >= 100:\n        return False\n    factors = []\n    for i in range(2, a):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    if a > 1:\n        factors.append(a)\n    return len(factors) == 3 and all(is_prime(factor) for factor in factors)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n\n    power = 0\n    while n ** power < x:\n        power += 1\n        \n    return n ** power == x\n\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    \n    num = abs(a)\n    root = round(num**(1/3))\n    \n    return root**3 == num\n\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    prime_count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    return prime_count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades\n\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = sum([int(d) for d in bin(N)[2:]])\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n                \n    result = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))\n    \n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sum_first_last = array[0] + array[-1] if len(array) > 0 else 0\n\n    sorted_array = sorted(array)\n    return sorted_array if sum_first_last % 2 != 0 else sorted_array[::-1]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join([chr((ord(char) - 97 + 4) % 26 + 97) if char.islower() else chr((ord(char) - 65 + 4) % 26 + 65) if char.isupper() else char for char in s])"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_unique = sorted(set(lst))\n    if len(sorted_unique) < 2:\n        return None\n    return sorted_unique[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith(\"I\"))\n\nimport re\n\n# Test cases\nassert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return any(isinstance(i, int) for i in [x, y, z]) and (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels.keys():\n                encoded_message += vowels.get(char.upper())\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n\n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(d) for d in str(num))\n\n    prime_sums = []\n    for num in lst:\n        if is_prime(num):\n            prime_sums.append(digit_sum(num))\n\n    if prime_sums:\n        return max(prime_sums)\n    else:\n        return 0\n\n# Test cases\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    return all(isinstance(key, str) and key.islower() for key in dict) or all(isinstance(key, str) and key.isupper() for key in dict)"}
{"task_id": "HumanEval/96", "completion": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes\n\nassert count_up_to(5) == [2, 3]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[-1] + 2 if stones[-1] % 2 == 1 else stones[-1] + 1)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words_list = s.replace(\",\", \" \").split()\n    return words_list\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max(i for i in range(x, y + 1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y + 1)) else -1\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    avg = total_sum / (m - n + 1)\n    \n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = filtered_arr[::-1]\n    \n    return [names[num-1] for num in reversed_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    \n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        num_str = str(num)\n        for digit in num_str:\n            if digit.isdigit():\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count\n\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n\nassert move_one_ball([3, 4, 5, 1, 2])==True\nassert move_one_ball([3, 5, 4, 1, 2])==False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x in lst1 if x % 2 != 0) <= sum(1 for x in lst2 if x % 2 == 0) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_count = {}\n    max_count = 0\n    \n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n        max_count = max(max_count, letter_count[letter])\n        \n    return {k: v for k, v in letter_count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(1 for digit in s if int(digit) % 2 != 0)}n the str{lst.index(s) + 1}ng {s} of the {lst.index(s) + 1}nput.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    total_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        total_sum = min(num, total_sum + num)\n        min_sum = min(min_sum, total_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_ops = 0\n    for col in range(len(grid[0])):\n        total_water = 0\n        for row in grid:\n            total_water += row[col]\n        total_ops += -(-total_water // capacity)\n    return total_ops\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x & 0xffffffff).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = \"aeiouAEIOU\"\n    return [word for word in s.split() if len([letter for letter in word if letter.isalpha() and letter not in vowels]) == n]\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants:\n            j = i - 1\n            while j > 0:\n                if word[j] in vowels:\n                    return word[j]\n                j -= 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_count = 0\n    for string in lst:\n        for char in string:\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n    if open_count == 0:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total_sum = 0\n    for num in arr[:k]:\n        if 10 <= num <= 99:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    if not date.count('-') == 2:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    \n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n\n# Test cases\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n    magnitude_sum = sum(abs(num) for num in arr)\n    return magnitude_sum * sign_product\n\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    min_path = None\n    n = len(grid)\n\n    def find_min_path(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:  # Compare lexicographically\n                min_path = path[:]\n            return\n\n        for nx, ny in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:\n            if 0 <= nx < n and 0 <= ny < n:\n                find_min_path(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(n):\n        for j in range(n):\n            find_min_path(i, j, [grid[i][j]])\n\n    return min_path\n\nassert minPath([ [1,2,3], [4,5,6], [7,8,9] ], 3) == [1, 2, 1]\nassert minPath([ [5,9,3], [4,1,6], [7,8,2] ], 1) == [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = [3 if i == 1 else 1 + i // 2 if i % 2 == 0 else 0 for i in range(n+1)]\n    \n    for i in range(3, n+1):\n        if isinstance(seq[i], int) and i % 2 != 0:\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3]\n    \n    return seq\n\n# Test cases\nassert tri(3) == [3, 2, 8]\nassert tri(5) == [3, 5, 8, 0, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_product = 1\n    has_odd_digit = False\n    \n    for digit in str(n):\n        digit_int = int(digit)\n        if digit_int % 2 != 0:\n            odd_product *= digit_int\n            has_odd_digit = True\n    \n    return odd_product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n# Testing the function with the given test cases\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][]') == True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)\n\nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if last_word[-1].isalpha() and len(last_word) == 1 and txt[-1].isalpha():\n        return True\n    return False\n\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index - 1 if largest_index != -1 else -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_nums = [n for n in lst if n < 0]\n    pos_nums = [n for n in lst if n > 0]\n    largest_neg = max(neg_nums) if neg_nums else None\n    smallest_pos = min(pos_nums) if pos_nums else None\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a) if not isinstance(a, float) else a if ',' not in a else float(a.replace(',', '.'))\n    b = float(b) if not isinstance(b, float) else b if ',' not in b else float(b.replace(',', '.'))\n    \n    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 8 == 0\n\nassert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    space_count = 0\n    \n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count > 2:\n                result = result[:-2] + \"-\"  # replace last two characters with a hyphen\n                space_count = 1  # reset space count\n            else:\n                result += \"_\"\n        else:\n            result += char\n            space_count = 0\n            \n    return result\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    \n    if len(parts) != 2:\n        return 'No'\n    \n    first_part = parts[0]\n    if not first_part or not first_part[0].isalpha() or sum(1 for char in first_part if char.isdigit()) > 3:\n        return 'No'\n    \n    second_part = parts[1]\n    if second_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n\nassert file_name_check(\"example.txt\") == 'Yes'\nassert file_name_check(\"1example.dll\") == 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n\nassert sum_squares([1, 2, 3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1, -5, 2, -1, -5]) == -126"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_words = []\n    words = sentence.split()\n    \n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    \n    return ' '.join(prime_words)\n\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split(\"/\"))\n    n_num, n_denom = map(int, n.split(\"/\"))\n    product = (x_num / x_denom) * (n_num / n_denom)\n    return product.is_integer()"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n):\n            a_j = j * j - j + 1\n            for k in range(j+1, n):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    idx1 = planets_order.index(planet1)\n    idx2 = planets_order.index(planet2)\n    \n    if idx1 == idx2:\n        return ()\n    \n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    \n    sorted_planets = [planet for planet in planets_order[start + 1:end] if planet != planet1 and planet != planet2]\n    sorted_planets.sort(key=lambda x: planets_order.index(x))\n    \n    return tuple(sorted_planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_words, key=lambda x: (len(x), x))\n    return sorted_words\n\n# Test cases\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Output: [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Output: [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\nassert compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]\nassert compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) == [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = None\n    max_strength = float('-inf')\n    \n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        \n        if strength > max_strength or (strength == max_strength and extensions.index(ext) < extensions.index(strongest)):\n            strongest = ext\n            max_strength = strength\n    \n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for _ in range(len(b)):  # iterating through all rotations of word b\n        if b in a:  # checking if the current rotation is a substring of word a\n            return True\n        b = b[1:] + b[0]  # rotating word b\n    return False\n\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count\n\nassert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    mapping = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = \"\"\n    for value, numeral in sorted(mapping.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars_count = len(set(word))\n        \n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n    \n    return max_word\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\nassert eat(5, 6, 10) == [11, 4]\nassert eat(4, 8, 9) == [12, 1]\nassert eat(1, 10, 10) == [11, 0]\nassert eat(2, 11, 5) == [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n\nassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    letters = [c for c in s if c.isalpha()]\n    \n    if not letters:\n        return s[::-1]\n    \n    for c in s:\n        if c.isalpha():\n            result += c.upper() if c.islower() else c.lower()\n        else:\n            result += c\n    \n    return result\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    a, b = min(a, b), max(a, b)\n    return [num for num in range(a, b+1) if all(int(digit) % 2 == 0 for digit in str(num) if digit in ['0', '2', '4', '6', '8'])]\n\nassert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(10, 14) == []"}
