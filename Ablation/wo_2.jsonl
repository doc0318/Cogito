{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    start = None\n    stack = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            stack.append(i)\n            if len(stack) == 1:\n                start = i\n        elif char == \")\":\n            if len(stack) == 1:\n                group = paren_string[start : i + 1]\n                result.append(group)\n            stack.pop()\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    while decimal_part >= 1:\n        decimal_part -= 1\n    return round(decimal_part, 10)\n\nassert truncate_number(3.5) == 0.5"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers) \n\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result\n\nassert intersperse([], 4) == []\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        result.append(max_level)\n    return result\n\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return (sum_result, product_result)"}
{"task_id": "HumanEval/9", "completion": "from collections import deque\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    window_size = 3\n    max_list = []\n    deque_max = deque()\n    \n    for i, num in enumerate(numbers):\n        if deque_max and deque_max[0] <= i - window_size:\n            deque_max.popleft()\n        \n        while deque_max and numbers[deque_max[-1]] < num:\n            deque_max.pop()\n        \n        deque_max.append(i)\n        max_list.append(numbers[deque_max[0]])\n    \n    return max_list\n\nassert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string) + 1):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\n# Test Cases\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return format(int(a, 2) ^ int(b, 2), '0' + str(max(len(a), len(b))) + 'b')"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n\n    return longest_str\n\nassert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    seq = ''\n    for i in range(n + 1):\n        seq += str(i)\n        if i != n:\n            seq += ' '\n    return seq"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 1)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0 and i < n:\n            largest = i\n    return largest"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    if not strings:\n        return ''\n    return ''.join(strings)\n\nassert concatenate([]) == ''\nassert concatenate(['a', 'b', 'c']) == 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n\nassert filter_by_prefix([], 'a') == []\nassert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    def f(x):\n        return poly(xs, x)\n\n    # Initial guess for bisection method\n    a = -1000\n    b = 1000\n    tol = 1e-6\n\n    if f(a) * f(b) > 0:\n        return None\n\n    while (b - a) / 2 > tol:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n\n    return (a + b) / 2\n\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    third_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = [third_values.pop(0) if i % 3 == 0 else v for i, v in enumerate(l)]\n    return result\n\nassert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max_num = float('-inf')\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nassert max_element([1, 2, 3]) == 3\nassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even_nums = sorted([num for i, num in enumerate(l) if i % 2 == 0])\n    result = [even_nums.pop(0) if i % 2 == 0 else num for i, num in enumerate(l)]\n    return result\n\nassert sort_even([1, 2, 3]) == [1, 2, 3]\nassert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3*i):min((3*i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3*i):min((3*i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\nassert decode_cyclic(encode_cyclic('abc')) == 'abc'\nassert decode_cyclic(encode_cyclic('abcabc')) == 'abcabc'"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    def fibonacci_number(k):\n        if k <= 1:\n            return k\n        else:\n            return fibonacci_number(k-1) + fibonacci_number(k-2)\n\n    count = 0\n    num = 2\n    while count < n:\n        fib_num = fibonacci_number(num)\n        if is_prime(fib_num):\n            count += 1\n        num += 1\n    return fib_num\n\n# Test cases\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\nassert triples_sum_to_zero([1, 3, 5, 0]) == False\nassert triples_sum_to_zero([1, 3, -2, 1]) == True\nassert triples_sum_to_zero([1, 2, 3, 7]) == False\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\nassert triples_sum_to_zero([1]) == False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        collisions += i\n    return collisions\n\n# Passing all the given test cases: []\n# The new solution uses a loop to calculate the number of collisions in a different way."}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\nassert triangle_area(5, 3) == 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            next_num = a + b + c + d\n            a, b, c, d = b, c, d, next_num\n        return d\n\nassert fib4(5) == 4\nassert fib4(6) == 8\nassert fib4(7) == 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    return sorted_list[mid] if n % 2 != 0 else (sorted_list[mid - 1] + sorted_list[mid]) / 2\n\n# Test cases\nassert median([3, 1, 2, 4, 5]) == 3\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return pow(2, n, p)\n\n\nassert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n\nassert remove_vowels('') == ''\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\nassert remove_vowels('abcdef') == 'bcdf'\nassert remove_vowels('aaaaa') == ''\nassert remove_vowels('aaBAA') == 'B'\nassert remove_vowels('zbcd') == 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)\n\nassert below_threshold([1, 2, 4, 10], 100) == True\nassert below_threshold([1, 20, 4, 10], 5) == False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nassert add(2, 3) == 5\nassert add(5, 7) == 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return all(char in s1 for char in s0) and all(char in s0 for char in s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nassert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    \n    for char in brackets:\n        if char == '<':\n            stack.append('<')\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def smallest_prime_factor(num):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0 and is_prime(i):\n                return i\n    \n    while True:\n        factor = smallest_prime_factor(n)\n        if factor is None:\n            return n\n        n //= factor\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append('(')\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [c * i for i, c in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\nassert fibfib(1) == 0\nassert fibfib(5) == 4\nassert fibfib(8) == 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (i == len(s) - 1 and char.lower() == 'y'):\n            vowel_count += 1\n    return vowel_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift <= 0:\n        return x_str\n    effective_shift = shift % len(x_str)\n    if effective_shift == 0:\n        return x_str\n    if effective_shift >= len(x_str):\n        return x_str[::-1]\n    return x_str[-effective_shift:] + x_str[:-effective_shift]\n\nassert circular_shift(12, 1) == \"21\"\nassert circular_shift(12, 2) == \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    return n - apples - oranges\n\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_even_index = i\n\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n\nassert pluck([4,2,3]) == [2, 1]\nassert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_count = {}\n    \n    for num in lst:\n        if num in freq_count:\n            freq_count[num] += 1\n        else:\n            freq_count[num] = 1\n    \n    result = -1\n    for k, v in freq_count.items():\n        if v >= k:\n            result = max(result, k)\n    \n    return result\n\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result\n\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            changes += 1\n    return changes\n\nassert smallest_change([1,2,3,5,4,7,9,6]) == 4\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nassert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, 101) if is_prime(num)]\n    \n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a //= prime\n            \n    return len(factors) == 3\n\nassert is_multiply_prime(30) == True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return n == 1\n    if n == 1:\n        return x == 1\n\n    power = 0\n    while n ** power < x:\n        power += 1\n        \n    return n ** power == x\n\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # Check if the input number is a cube of some integer\n    if a < 0:\n        return int(round(abs(a) ** (1 / 3))) ** 3 == abs(a)\n    else:\n        return int(round(a ** (1 / 3))) ** 3 == a\n\n# Test cases\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n\n    for char in num:\n        if char.upper() in hex_primes:\n            count += 1\n    \n    return count\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else \n            'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else \n            'C-' if g > 1.3 else 'D+' if g > 1.0 else 'D' if g > 0.7 else 'D-' if g >= 0.0 else 'E'\n            for g in grades]"}
{"task_id": "HumanEval/82", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return 2 * 9 * 10 ** (n - 2) + 10 ** (n - 1) - 10 ** (n - 2)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_rep = bin(N)[2:]\n    total_sum = sum(int(digit) for digit in binary_rep)\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\nassert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) <= 1:\n        return array.copy()\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - 97 + 4 * 2) % 26) + 97)\n            result += encrypted_char\n        else:\n            result += char\n    return result\n\nassert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_unique = sorted(set(lst))\n    if len(sorted_unique) < 2:\n        return None\n    return sorted_unique[1]\n\nassert next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2\nassert next_smallest([]) == None\nassert next_smallest([1, 1]) == None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in S.split('.') + S.split('?') + S.split('!')]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = \"\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels_mapping:\n                new_char = vowels_mapping[char.lower()].upper() if char.isupper() else vowels_mapping[char.lower()]\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        encoded_message += new_char\n        \n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(d) for d in str(num))\n\n    max_prime = 0\n    max_prime_sum = 0\n\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n                max_prime_sum = digit_sum(num)\n\n    return max_prime_sum\n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    is_lower = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    is_upper = all(key.isupper() for key in dict.keys() if isinstance(key,str))\n\n    return is_lower or is_upper\n\nassert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True\nassert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False\nassert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False\nassert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False\nassert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\" }) == True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n        \n    primes = []\n    for num in range(2, n):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    \n    return primes\n\nassert count_up_to(5) == [2,3]\nassert count_up_to(11) == [2,3,5,7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2,3,5,7,11,13,17,19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return (a % 10) * (b % 10)\n\nassert multiply(148, 412) == 16\nassert multiply(19, 28) == 72\nassert multiply(2020, 1851) == 0\nassert multiply(14, -15) == 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    decimal, integer = math.modf(num)\n    if decimal >= 0.5:\n        return math.ceil(num)\n    elif decimal <= -0.5:\n        return math.floor(num)\n    else:\n        return round(num)\n\nassert closest_integer(\"10\") == 10\nassert closest_integer(\"15.3\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(',', ' ').split()]\n\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return -1  \n    max_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n\nassert choose_num(12, 15) == 14\nassert choose_num(13, 12) == -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    def map_to_name(num):\n        names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        return names[num - 1]\n\n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = filtered_arr[::-1]\n    return list(map(map_to_name, reversed_arr))\n\nassert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nassert by_length([]) == []\nassert by_length([1, -1, 55]) == [\"One\"]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\nassert f(5) == [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(number):\n        return str(number) == str(number)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count\n\nassert even_odd_palindrome(12) == (4, 6)\nassert even_odd_palindrome(3) == (1, 2)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def get_digit_sum(num):\n        num_str = str(abs(num))\n        return sum([int(digit) for digit in num_str])\n    \n    return sum(1 for num in arr if get_digit_sum(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    n = len(arr)\n    \n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n\nassert move_one_ball([3, 4, 5, 1, 2]) == True\nassert move_one_ball([3, 5, 4, 1, 2]) == False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    return \"YES\" if count_odd <= len(lst2) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_count = {}\n    \n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values()) if letter_count else 0\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    res = ''.join(char for char in s if char not in c)\n    return (res, res == res[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(c) % 2 != 0 for c in s), sum(int(c) % 2 != 0 for c in s), i, i)) for i, s in enumerate(lst)]\n\nassert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nassert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_times_lowered = 0\n    for row in grid:\n        water_level = sum(row)\n        if water_level > 0:\n            total_times_lowered += math.ceil(water_level / capacity)\n    return total_times_lowered\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 1, -1):\n        if word[i] not in vowels and word[i-1] in vowels and word[i-2] not in vowels:\n            return word[i-1]\n    return \"\"\n\nassert get_closest_vowel(\"yogurt\") == \"u\"\nassert get_closest_vowel(\"FULL\") == \"U\"\nassert get_closest_vowel(\"quick\") == \"\"\nassert get_closest_vowel(\"ab\") == \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    count = 0\n    for string in lst:\n        for char in string:\n            if char == \"(\":\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return \"No\"\n    if count == 0:\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_elements = 0\n    for i in range(min(k, len(arr))):\n        if abs(arr[i]) < 100:\n            sum_elements += arr[i]\n    return sum_elements\n\nassert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while collatz_sequence[-1] != 1:\n        if collatz_sequence[-1] % 2 == 0:\n            collatz_sequence.append(collatz_sequence[-1] // 2)\n        else:\n            collatz_sequence.append(3 * collatz_sequence[-1] + 1)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])\n\nassert get_odd_collatz(5) == [1, 5]\nassert get_odd_collatz(1) == [1]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n\n    if '-' not in date:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length < 2:\n        return \"NO\"\n\n    return \"YES\" if is_prime(length + 1) else \"NO\"\n\nassert intersection((1, 2), (2, 3)) == \"NO\"\nassert intersection((-1, 1), (0, 4)) == \"NO\"\nassert intersection((-3, -1), (-5, 5)) == \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        sum_magnitudes += abs(num)\n\n    return sum_magnitudes * sign_product\n\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n\n    def neighbors(i, j):\n        for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= x < n and 0 <= y < n:\n                yield x, y\n\n    def dfs(i, j, path):\n        nonlocal res\n        path.append(grid[i][j])\n        if len(path) == k:\n            if not res or path < res:\n                res = list(path)\n        else:\n            for x, y in neighbors(i, j):\n                dfs(x, y, path)\n        path.pop()\n\n    res = []\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [])\n\n    return res\n\nassert minPath([ [1,2,3], [4,5,6], [7,8,9] ], 3) == [1, 2, 1]\nassert minPath([ [5,9,3], [4,1,6], [7,8,2] ], 1) == [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = [3]\n    t0, t1, t2 = 1, 3, 2\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tn = 1 + i // 2\n        else:\n            tn = t0 + t1 + t2\n            t0, t1, t2 = t1, t2, tn\n        seq.append(tn)\n    return seq\n\nassert tri(3) == [3, 1, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    for digit_char in str(n):\n        digit = int(digit_char)\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n    \n    return product if has_odd else 0\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    opening_brackets = 0\n\n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > 0:\n            opening_brackets -= 1\n\n    return opening_brackets > 0\n\n# Test cases\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][]') == True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    import math\n    return sum(math.ceil(num) ** 2 for num in lst)\n\nassert sum_squares([1,2,3])==14\nassert sum_squares([1,4,9])==98\nassert sum_squares([1,3,5,7])==84\nassert sum_squares([1.4,4.2,0])==29\nassert sum_squares([-2.4,1,1])==6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if txt:\n        words = txt.split()\n        if words and not words[-1].isalpha():\n            last_word = words[-1]\n            if last_word and last_word[-1].isalpha():\n                return True\n    return False\n\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index\n\nassert can_arrange([1,2,4,3,5]) == 3\nassert can_arrange([1,2,3]) == -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float(val):\n        if isinstance(val, str):\n            val = val.replace(\",\", \".\")\n        return float(val)\n\n    a = convert_to_float(a)\n    b = convert_to_float(b)\n    \n    if a == b:\n        return None\n    return max(a, b)\n\nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0 and n != 12\n\nassert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        fact_i = 1\n        for j in range(1, i+1):\n            fact_i *= j\n        result *= fact_i\n    return result\n\nassert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    \n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append(\"-\")\n            else:\n                result.append(\"_\")\n        else:\n            result.append(char)\n            consecutive_spaces = 0\n    \n    return \"\".join(result)\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    digits_count = sum(c.isdigit() for c in file_name)\n    dot_count = file_name.count('.')\n    \n    file_name_parts = file_name.split('.')\n    \n    if digits_count > 3 or dot_count != 1 or len(file_name_parts) != 2 or not file_name_parts[0] or not file_name_parts[0][0].isalpha() or file_name_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n\nassert file_name_check(\"example.txt\") == 'Yes'\nassert file_name_check(\"1example.dll\") == 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum([x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x for i, x in enumerate(lst)])\n\nassert sum_squares([1,2,3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1,-5,2,-1,-5]) == -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Test cases\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    num = x_num * n_num\n    den = x_den * n_den\n    \n    common_divisor = gcd(num, den)\n    \n    num //= common_divisor\n    den //= common_divisor\n    \n    return den == 1\n\nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nassert get_max_triples(5) == 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    start_idx = min(idx1, idx2) + 1\n    end_idx = max(idx1, idx2)\n\n    return tuple(sorted([planet for planet in planets[start_idx:end_idx]], key=lambda x: planets.index(x)))\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\nassert compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]\nassert compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) == [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    order_of_occurrence = float('inf')\n\n    for i, extension in enumerate(extensions):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n\n        if strength > strongest_strength or (strength == strongest_strength and i < order_of_occurrence):\n            strongest_extension = extension\n            strongest_strength = strength\n            order_of_occurrence = i\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = len([digit for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n    result = ''\n    for roman, value in roman_dict.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result.lower()\n\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    \n    return max_word\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [total_eaten, left]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\nassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    modified = \"\"\n    found_letter = False\n\n    for char in s:\n        if char.isalpha():\n            modified += char.upper() if char.islower() else char.lower()\n            found_letter = True\n        else:\n            modified += char\n\n    if not found_letter:\n        modified = modified[::-1]\n\n    return modified\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None\n\nassert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]"}
