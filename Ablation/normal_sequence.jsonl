{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    group = \"\"\n    open_count = 0\n    close_count = 0\n    for char in paren_string:\n        group += char\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n            if open_count == close_count:\n                result.append(group)\n                group = \"\"\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [i for e in numbers[:-1] for i in (e, delimeter)] + numbers[-1:] if numbers else []"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths\n\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = sum(numbers) if numbers else 0\n    product_value = 1\n    for num in numbers:\n        product_value *= num\n    return sum_value, product_value\n\nassert sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3, 4]) == (10, 24)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string) + 1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''\n\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n\nassert longest([]) == None\nassert longest(['a', 'b', 'c']) == 'a'\nassert longest(['a', 'bb', 'ccc']) == 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\nassert greatest_common_divisor(3, 5) == 1\nassert greatest_common_divisor(25, 15) == 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n\nassert all_prefixes('abc') == ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join([str(i) for i in range(n + 1)])"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    beats = []\n\n    for note in music_string.split():\n        beats.append(notes_to_beats[note])\n\n    return beats\n\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: number_map[x]))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\nassert strlen('') == 0\nassert strlen('abc') == 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\nassert factorize(8) == [2, 2, 2]\nassert factorize(25) == [5, 5]\nassert factorize(70) == [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() if char.islower() else char for char in string])"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for string in strings:\n        result += string\n    return result\n\nassert concatenate([]) == ''\nassert concatenate(['a', 'b', 'c']) == 'abc'"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n\nassert is_prime(6) == False\nassert is_prime(101) == True\nassert is_prime(11) == True\nassert is_prime(13441) == True\nassert is_prime(61) == True\nassert is_prime(4) == False\nassert is_prime(1) == False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    max_coeff = max(xs)\n    n = len(xs) // 2\n    return -xs[0] / xs[1] if n == 1 else 1.0\n\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    sorted_indexes = sorted([i for i in range(len(l)) if i % 3 == 0], reverse=True)\n    for i in sorted_indexes:\n        sub_list = sorted([val for idx, val in enumerate(l) if idx % 3 == i % 3])\n        for idx, val in enumerate(l):\n            if idx % 3 == i % 3:\n                l[idx] = sub_list.pop(0)\n    return l\n\nassert sort_third([1, 2, 3]) == [1, 2, 3]\nassert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(str(num).count('7') for num in range(1, n) if num % 11 == 0 or num % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [v if i % 2 != 0 else even_indices.pop(0) for i, v in enumerate(l)]\n\nassert sort_even([1, 2, 3]) == [1, 2, 3]\nassert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci():\n        a, b = 0, 1\n        yield a\n        yield b\n        while True:\n            a, b = b, a + b\n            yield b\n\n    fib_gen = fibonacci()\n    count = 0\n    while True:\n        num = next(fib_gen)\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        complements = set()\n        for j in range(i + 1, len(l)):\n            if -l[i] - l[j] in complements:\n                return True\n            complements.add(l[j])\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [num + 1 for num in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(-i in l for i in l if i != 0)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_fib = fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4]\n        fib_sequence.append(next_fib)\n    return fib_sequence[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 != 0:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n\nassert median([3, 1, 2, 4, 5]) == 3\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n\nassert add(2, 3) == 5\nassert add(5, 7) == 12"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))\n\n\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\nassert same_chars('abcd', 'dddddddabc') == True\nassert same_chars('dddddddabc', 'abcd') == True\nassert same_chars('eabcd', 'dddddddabc') == False\nassert same_chars('abcd', 'dddddddabce') == False\nassert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] >= l[i-1] for i in range(1, len(l)))\n    decreasing = all(l[i] <= l[i-1] for i in range(1, len(l)))\n    return increasing or decreasing\n\nassert monotonic([1, 2, 4, 20]) == True\nassert monotonic([1, 20, 4, 10]) == False\nassert monotonic([4, 1, 0, -10]) == True"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [coeff * i for i, coeff in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n < 3:\n        return [0, 0, 1][n]\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count\n\n# Test Cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"banana\") == 3\nassert vowels_count(\"sky\") == 1\nassert vowels_count(\"QueenY\") == 4"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    nums = [int(x) for x in s.split() if x.isdigit()]\n    return n - sum(nums)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and (smallest_even_value is None or arr[i] < smallest_even_value):\n            smallest_even_value = arr[i]\n            smallest_index = i\n        elif arr[i] == smallest_even_value and i < smallest_index:\n            smallest_index = i\n    \n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max([num for num in set(lst) if lst.count(num) >= num and num > 0], default=-1)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nassert will_it_fly([1, 2], 5) == False\nassert will_it_fly([3, 2, 3], 1) == False\nassert will_it_fly([3, 2, 3], 9) == True\nassert will_it_fly([3], 5) == True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    return sum(1 for i in range(len(arr)//2) if arr[i] != arr[-i-1])"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum(len(word) for word in lst1) <= sum(len(word) for word in lst2) else lst2\n\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, 100) if is_prime(num)]\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\nassert is_multiply_prime(30) == True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x <= 0 or n <= 1:\n        return False\n    i = 0\n    while n ** i < x:\n        i += 1\n    return n ** i == x\n\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    a = abs(a)\n    for i in range(a+1):\n        if i**3 == a:\n            return True\n    return False\n\nassert iscube(1) == True\nassert iscube(2) == False\nassert iscube(-1) == True\nassert iscube(64) == True\nassert iscube(0) == True\nassert iscube(180) == False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = set(['2', '3', '5', '7', 'B', 'D'])\n    return sum(1 for d in num if d in primes)\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return 'db' + format(decimal, 'b') + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nassert is_happy(\"a\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"abcd\") == True\nassert is_happy(\"aabb\") == False\nassert is_happy(\"adb\") == True\nassert is_happy(\"xyy\") == False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    if string == string[::-1]:\n        return True\n    \n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        num_str = str(i)\n        if num_str[0] == '1' or num_str[-1] == '1':\n            count += 1\n    return count\n\nprint(starts_one_ends(1))  \nprint(starts_one_ends(2))  \nprint(starts_one_ends(3))  \nprint(starts_one_ends(4))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n\nassert anti_shuffle('Hi') == 'Hi'\nassert anti_shuffle('hello') == 'ehllo'\nassert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\nassert get_row(\n    [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([], 1) == []\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1] if array else 0\n    return sorted(sorted_array) if sum_first_last % 2 != 0 else sorted(sorted_array, reverse=True)\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr(((ord(char) - ord('a') + 2 * 2) % 26) + ord('a')) for char in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n\nassert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    nums = [x, y, z]\n    if not all(isinstance(num, int) for num in nums):\n        return False\n    for i in range(3):\n        if nums[i] == sum(nums) - nums[i]:\n            return True\n    return False\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr(ord(char.lower()) + 2)\n                encoded_message += new_char.upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n            \n    return encoded_message\n\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_digit_sum = 0\n    for num in lst:\n        if is_prime(num):\n            current_sum = digit_sum(num)\n            if current_sum > max_digit_sum:\n                max_digit_sum = current_sum\n\n    return max_digit_sum\n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    has_lower = False\n    has_upper = False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        \n        if key.islower():\n            has_lower = True\n        elif key.isupper():\n            has_upper = True\n        else:\n            return False\n    \n    return has_lower == False or has_upper == False\n\nassert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\nassert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\nassert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"c\":\"apple\"}) == False\nassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\nassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nassert count_up_to(5) == [2, 3]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(0) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(1) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value == round(value):\n        return int(value)\n    elif value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(n - 1):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 1)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile\n\nassert make_a_pile(3) == [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(',', ' ').split()]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    return max([i for i in range(x, y + 1) if i % 2 == 0] + [-1])"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    return -1 if n > m else bin(round((n+m)/2))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [mapping[num] for num in reversed_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\nassert f(5) == [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    return count\n\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for i in range(n):\n        if arr[(min_idx + i) % n] != min_val + i:\n            return False\n    \n    return True\n\nassert move_one_ball([3, 4, 5, 1, 2]) == True\nassert move_one_ball([3, 5, 4, 1, 2]) == False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    count_even_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    return \"YES\" if count_odd_lst1 <= count_even_lst2 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{idx}ng {string} of the {idx}nput.\" for idx, string in enumerate(lst)]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = float('inf')\n    \n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum\n\nassert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nassert minSubArraySum([-1, -2, -3]) == -6"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        count += math.ceil(sum(row) / capacity)\n    return count\n\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    return [word for word in s.split() if count_consonants(word) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def check(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    new_lst = [lst[0] + lst[1], lst[1] + lst[0]]\n    return 'Yes' if any(check(s) for s in new_lst) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]\n\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total_sum = 0\n    for num in arr[:k]:\n        if 10 <= num < 100:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    try:\n        month, day, year = map(int, parts)\n    except ValueError:\n        return False\n\n    if not (1 <= month <= 12):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        max_days = 29 if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else 28\n\n    if not (1 <= day <= max_days):\n        return False\n\n    return True\n\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n# Test cases\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\nassert split_words(\"abcdef\") == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count_digit = {}\n    for i in lst:\n        if i not in count_digit:\n            count_digit[i] = 1\n        else:\n            count_digit[i] += 1\n\n    if any(count_digit[i] > 2 for i in count_digit):\n        return False\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True\n\n# Check test cases\nassert is_sorted([5]) == True\nassert is_sorted([1, 2, 3, 4, 5]) == True\nassert is_sorted([1, 3, 2, 4, 5]) == False\nassert is_sorted([1, 2, 3, 4, 5, 6]) == True\nassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\nassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\nassert is_sorted([1, 2, 2, 3, 3, 4]) == True\nassert is_sorted([1, 2, 2, 2, 3, 4]) == False"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sum_magnitudes = 0\n    product_signs = 1\n\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= 1 if num > 0 else -1 if num < 0 else 0\n\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n\n    def is_valid(i, j, visited):\n        return 0 <= i < n and 0 <= j < n and (i, j) not in visited\n\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n\n        min_path = None\n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj, visited):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]], visited | {(ni, nj)})\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = list(new_path)\n\n        return min_path\n\n    best_path = None\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]], {(i, j)})\n            if path and (not best_path or path < best_path):\n                best_path = path\n\n    return best_path\n\n# Test cases\nassert minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 1]\nassert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    \n    res = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            res.append(1 + i // 2)\n        else:\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    \n    return res"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return eval('*'.join(str(int(d)) for d in str(n) if int(d) % 2 != 0)) if any(int(d) % 2 != 0 for d in str(n)) else 0\n\nassert digits(1) == 1\nassert digits(4) == 0\nassert digits(235) == 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][]') == True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    import math\n    return sum(math.ceil(num) ** 2 for num in lst if isinstance(num, (int, float)) and not math.isnan(num))\n\nassert sum_squares([1,2,3])==14\nassert sum_squares([1,4,9])==98\nassert sum_squares([1,3,5,7])==84\nassert sum_squares([1.4,4.2,0])==29\nassert sum_squares([-2.4,1,1])==6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == '':\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    return False\n\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index if largest_index != -1 else -1\n\nassert can_arrange([1,2,4,3,5]) == 3\nassert can_arrange([1,2,3]) == -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a.replace(\",\", \".\")) if isinstance(a, str) else a\n    b = float(b.replace(\",\", \".\")) if isinstance(b, str) else b\n\n    if a > b:\n        return a if type(a) == type(b) else a\n    elif b > a:\n        return b if type(b) == type(a) else b\n    else:\n        return None\n\nassert compare_one(1, 2.5) == 2.5\nassert compare_one(1, \"2,3\") == \"2,3\"\nassert compare_one(\"5,1\", \"6\") == \"6\"\nassert compare_one(\"1\", 1) == None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        if i + j + k + l == n:\n                            return True\n    return False\n\nassert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\nassert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result.rstrip(\"_\") + \"-\"\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result\n\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3 or file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\nassert file_name_check(\"example.txt\") == 'Yes'\nassert file_name_check(\"1example.dll\") == 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for index, num in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += num ** 2\n        elif index % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum\n\nassert sum_squares([1,2,3]) == 6\nassert sum_squares([]) == 0\nassert sum_squares([-1,-5,2,-1,-5]) == -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def is_prime_length(word):\n        return is_prime(len(word))\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_length(word)]\n    return ' '.join(prime_words) if prime_words else ''\n\nassert words_in_sentence(\"This is a test\") == \"is\"\nassert words_in_sentence(\"lets go for swimming\") == \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product = x_num * n_num\n    result = product % (x_den * n_den)\n    \n    return result == 0\n\nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        if num < 0:\n            num = abs(num)\n        return sum(int(d) for d in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x))) if nums else []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nassert get_max_triples(5) == 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    result = [planet for planet in planets if start < planets.index(planet) < end]\n    \n    result.remove(planet1)\n    result.remove(planet2)\n    \n    return tuple(result)\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y\n\nassert x_or_y(7, 34, 12) == 34\nassert x_or_y(15, 8, 5) == 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            total_sum += num ** 2\n    return 2 * total_sum if lst else 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        if not isinstance(extension, str):\n            continue\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\" if extensions else \"\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n    \n    for _ in range(len(b)):\n        if b in a or is_rotation(b, a):\n            return True\n        b = b[1:] + b[0]\n    \n    return False\n\nassert cycpattern_check(\"abcd\",\"abd\") == False\nassert cycpattern_check(\"hello\",\"ell\") == True\nassert cycpattern_check(\"whassup\",\"psus\") == False\nassert cycpattern_check(\"abab\",\"baa\") == True\nassert cycpattern_check(\"efef\",\"eeff\") == False\nassert cycpattern_check(\"himenss\",\"simen\") == True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    mapping = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n               100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(mapping.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = -1\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = min(need, remaining) + number\n    remaining = max(0, remaining - need)\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '*':\n            result *= num\n        elif op == '-':\n            result -= num\n    return result\n\nassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s]\n    result = \"\".join(letters) if any(char.isalpha() for char in s) else s[::-1]\n    return result\n\nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]"}
