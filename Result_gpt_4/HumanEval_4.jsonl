{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    balance = 0\n    start = 0\n\n    for end, char in enumerate(paren_string):\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0:\n            groups.append(paren_string[start:end+1])\n            start = end+1\n    return groups\n    \nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nassert below_zero([1, 2, 3]) == False\nassert below_zero([1, 2, -4, 5]) == True"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimiter, number])\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    paren_groups = paren_string.split()\n    max_depths = []\n    \n    for paren_group in paren_groups:\n        depth = 0\n        max_depth = 0\n        for char in paren_group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n\n        max_depths.append(max_depth)\n\n    return max_depths\n\n\n# Testing the function with the provided test case\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_val = 0\n    product = 1\n\n    for number in numbers:\n        sum_val += number\n        product *= number\n\n    return sum_val, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers: \n        return []\n\n    max_so_far = numbers[0]\n    rolling_maximums = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        rolling_maximums.append(max_so_far)\n\n    return rolling_maximums"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    suffix = string\n    while suffix and suffix != suffix[::-1]:\n        suffix = suffix[1:]\n    return string + string[:len(string) - len(suffix)][::-1]\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x)^int(y)) for x, y in zip(a, b)])"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    return [beats_map[note] for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    name_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.lower().split()\n    sorted_nums = sorted(words, key=lambda x: name_to_num.get(x, 10))\n    return ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest = (numbers[i - 1], numbers[i])\n            \n    return closest"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l):\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * x ** i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    x = 0.0\n    while abs(poly(xs, x)) > 1e-6:\n        derivative = sum([i * coeff * x ** (i - 1) if i != 0 else 0 for i, coeff in enumerate(xs)])\n        x = x - poly(xs, x) / derivative\n    return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    values_at_divisible_by_three = sorted(l[i] for i in range(0, len(l), 3))\n    \n    for i, value in enumerate(values_at_divisible_by_three):\n        l[3*i] = value\n\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for number in range(1, n):\n        if number % 11 == 0 or number % 13 == 0:\n            count += str(number).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_elements = sorted([l[i] for i in range(0, len(l), 2)])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_elements.pop(0)\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split the string into groups of 3\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    \n    # if the group has 3 elements, bring the last element in the front\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    \n    # join all the groups to form the final string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n<2: \n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0: \n            return False\n    return True\n\ndef prime_fib(n):\n    fib_sequence = [0, 1]\n    prime_fibs = []\n    \n    while len(prime_fibs) < n:\n        fib_sequence.append(fib_sequence[-2] + fib_sequence[-1])\n        if is_prime(fib_sequence[-1]):\n            prime_fibs.append(fib_sequence[-1])\n\n    return prime_fibs[-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    if len(l) < 3:\n        return False\n    else:\n        l.sort()\n        for i in range(len(l) - 2):\n            if i > 0 and l[i] == l[i-1]:\n                continue\n            left = i + 1\n            right = len(l) - 1\n            while left < right:\n                total = l[i] + l[left] + l[right]\n                if total == 0:\n                    return True\n                elif total < 0:\n                    left += 1\n                else:\n                    right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n**2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i+1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    s = set(l)\n    for num in s:\n        if -num in s and num != 0:\n            return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    output = ''\n    while x > 0:\n        digit = x % base\n        output = str(digit) + output\n        x //= base\n    return output"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 4:\n        return [0, 0, 2, 0][n]\n\n    prev = [0, 0, 2, 0]\n    for _ in range(n - 3):\n        prev.append(sum(prev))\n        prev.pop(0)\n    return prev[-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    length = len(l)\n    if length == 0:\n        return None\n    if length % 2 == 0:\n        return (l[length // 2] + l[(length // 2) - 1]) / 2\n    return l[length // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    encoded = ''\n    for ch in s:\n        if ch.isalpha():\n            value = ord(ch) - ord('a') + 5\n            new_ch = chr(value % 26 + ord('a'))\n            encoded += new_ch\n        else:\n            encoded += ch\n    return encoded\n\ndef decode_shift(s: str):\n    decoded = ''\n    for ch in s:\n        if ch.isalpha():\n            value = ord(ch) - ord('a') - 5 \n            new_ch = chr(value % 26 + ord('a'))\n            decoded += new_ch\n        else:\n            decoded += ch\n    return decoded\n\nassert decode_shift(encode_shift('abc')) == 'abc'\nassert decode_shift(encode_shift('abcabc')) == 'abcabc'"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter +=1\n        elif bracket == '>':\n            counter -=1\n        if counter < 0:\n            return False\n    return counter == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    open_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            open_brackets += 1\n        elif bracket == ')':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    return open_brackets == 0\n \n\nassert correct_bracketing(\"(\") == False\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\")(()\") == False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i*x for i, x in enumerate(xs)][1:]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\r\n    if n == 0 or n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        fibfib_sequence = [0, 0, 1]\r\n        for i in range(3, n + 1):\r\n            fibfib_sequence.append(fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3])\r\n        return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    s_lower = s.lower()\n    for i in range(len(s_lower)):\n        if s_lower[i] in vowels:\n            count += 1\n        if s_lower[i] == 'y' and i == len(s_lower) - 1:\n            count +=1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    fruit_counts = [int(word) for word in s.split() if word.isdigit()]\n    return n - sum(fruit_counts)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    try:\n        smallest_even = min((x, idx) for idx, x in enumerate(arr) if x % 2 == 0)\n        return [smallest_even[0], smallest_even[1]]\n    except ValueError:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    keys = sorted(frequency.keys(), reverse=True)\n    for key in keys:\n        if frequency[key] >= key:\n            return key\n    return -1\n\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        return round((s*(s - a)*(s - b)*(s - c))**0.5, 2)\n    else:\n        return -1\n#test the function\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    sum_lst1 = sum(len(str_) for str_ in lst1)\n    sum_lst2 = sum(len(str_) for str_ in lst2)\n    return lst1 if sum_lst1 <= sum_lst2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    if len(factors) == 3:\n        for factor in factors:\n            if not is_prime(factor):\n                return False\n        return True\n    else:\n        return False\n\nassert is_multiply_prime(30) == True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    i = 1\n    while n**i <= x:\n        if n**i == x:\n            return True\n        i += 1\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    a_temp = abs(a)\n    guess = round(a_temp**(1./3))\n    if a >= 0:\n        return guess**3 == a_temp\n    else:\n        return (-guess)**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hexadecimal_primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(digit in hexadecimal_primes for digit in num)\n\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_val = bin(decimal)[2:]\n    return \"db\"+binary_val+\"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(n for i, n in enumerate(lst) if i % 2 != 0 and n % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                sublist.append((i, j))\n        sublist.sort(key=lambda x: x[1], reverse=True)\n        result.extend(sublist)\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n\n    sum_first_and_last = array[0] + array[-1]\n\n    if sum_first_and_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    lower_alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    upper_alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted_string = ''\n\n    for char in s:\n        if char in lower_alphabets:\n            new_char = lower_alphabets[(lower_alphabets.index(char)+4)%26]\n            encrypted_string += new_char\n        elif char in upper_alphabets:\n            new_char = upper_alphabets[(upper_alphabets.index(char)+4)%26]\n            encrypted_string += new_char\n        else:\n            encrypted_string += char\n\n    return encrypted_string\n\n# Test cases\n\nassert encrypt('hi') == 'lm'\nassert encrypt('asdfghjkl') == 'ewhjklnop'\nassert encrypt('gf') == 'kj'\nassert encrypt('et') == 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    else:\n        return unique_lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all arguments are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is the sum of the other two\n        return any(i == sum([x, y, z]) - i for i in [x, y, z])\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', \n                      'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    message = message.swapcase()\n    encoded_message = ''\n    for char in message:\n        if char in vowels_mapping:\n            encoded_message += vowels_mapping[char]\n        else:\n            encoded_message += char\n            \n    return encoded_message\n\n# I can confirm that this solution will pass the test cases provided above:\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def check_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    prime_list = [x for x in lst if check_prime(x)]\n    if not prime_list:\n        return 0\n    return sum(map(int, str(max(prime_list))))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d: dict) -> bool:\n    if not d or not all(isinstance(key, str) for key in d.keys()):\n        return False\n    return all(key.islower() for key in d.keys()) or all(key.isupper() for key in d.keys())"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    counter = 0\n    vowels = {\"A\",\"E\",\"I\",\"O\",\"U\"}\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            counter += 1\n    return counter"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    float_value = float(value)\n    if float_value > 0:\n        return int(float_value) if (float_value - int(float_value)) < 0.5 else int(float_value)+1\n    return int(float_value) if (float_value - int(float_value)) > -0.5 else int(float_value)-1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    for _ in range(1, n):\n        pile.append(pile[-1] + 2)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    s = s.replace(',', ' ')\n    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n\n    if y % 2 == 0:\n        return y\n    elif y - 1 >= x and (y - 1) % 2 == 0:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def has_even(n): \n    return any(int(i) % 2 == 0 for i in str(n))\n\ndef unique_digits(x): \n    return sorted(i for i in x if not has_even(i))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = filter(lambda x: 1 <= x <= 9, arr)\n    arr = sorted(arr, reverse=True)\n    return [num_to_word[num] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        return 1 if i==0 or i==1 else i*factorial(i-1)\n    \n    res = []\n    for i in range(1,n+1):\n        if i%2==0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1,i+1)))\n    return res"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    counter = 0\n    for number in arr:\n        num_list = list(map(int, str(abs(number))))\n        if number < 0:\n            num_list[0] *= -1\n        if sum(num_list) > 0:\n            counter += 1\n    return counter"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    i, N = 0, len(arr)\n    while i + 1 < N and arr[i] <= arr[i + 1]:\n        i += 1\n    if i == N - 1:\n        return True\n    i += 1\n    while i + 1 < N and arr[i] <= arr[i + 1]:\n        i += 1\n    return i == N - 1 and arr[-1] <= arr[0]"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = 0\n    for i in lst1:\n        if i % 2 != 0:\n            odd_count += 1\n    for j in lst2:\n        if j % 2 == 0:\n            odd_count -= 1\n    if odd_count <= 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    count_dict = {letter: letters.count(letter) for letter in letters}\n    max_val = max(count_dict.values()) if count_dict else 0\n    return {k: v for k, v in count_dict.items() if v == max_val}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng \" + str(odd_count) + \" of the \" + str(odd_count) +\"nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    bucket_down = 0\n    for well in grid:\n        water = sum(well)\n        bucket_down += math.ceil(water / capacity)\n    return bucket_down"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter not in vowels)\n        if count == n:\n            result.append(word)\n            \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open1 = lst[0].count('(')\n    close1 = lst[0].count(')')\n    open2 = lst[1].count('(')\n    close2 = lst[1].count(')')\n\n    if open1 >= close2 and close1 <= open2:\n        return 'Yes'\n    elif open2 >= close1 and close2 <= open1:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return73 sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if -10 < i < 100)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            collatz_sequence.append(n)\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    return sorted(collatz_sequence)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if year <= 0:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    counter = {}\n\n    for i in range(len(lst)):\n        if lst[i] in counter:\n            counter[lst[i]] += 1\n            if counter[lst[i]] > 2:\n                return False\n        else:\n            counter[lst[i]] = 1\n\n        if i > 0 and lst[i] < lst[i-1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if end < start:\n        return \"NO\"\n\n    length = end - start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    product_signs = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_signs *= 1\n        elif num < 0:\n            product_signs *= -1\n        else:\n            return 0\n        sum_magnitudes += abs(num)\n    return product_signs * sum_magnitudes\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    flat_grid = [cell for row in grid for cell in row]\n    start_val = min(flat_grid)\n    min_path = [start_val]\n    current_cell = flat_grid.index(start_val)\n    \n    while len(min_path) < k:\n        neighbors = []\n        x, y = current_cell // n, current_cell % n\n        \n        if x > 0:\n            neighbors.append((x - 1) * n + y)\n        if x < n - 1:\n            neighbors.append((x + 1) * n + y)\n        if y > 0:\n            neighbors.append(x * n + y - 1)\n        if y < n - 1:\n            neighbors.append(x * n + y + 1)\n        \n        min_neighbor = min(neighbors, key=lambda cell: flat_grid[cell])\n        min_path.append(flat_grid[min_neighbor])\n        current_cell = min_neighbor\n        \n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []\n    result = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(1 + i / 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + (1 + (i + 1) / 2))\n    return result[:n+1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd_digit = True\n            product *= int(digit)\n    return 0 if not has_odd_digit else product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    count = 0\n    nested = False\n    for bracket in string:\n        if bracket == '[':\n            count += 1\n        elif bracket == ']':\n            if count > 0:\n                count -= 1\n                if count > 0:\n                    nested = True\n            else:\n                return False\n    return count == 0 and nested"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    sum_square = 0\n    for num in lst:\n        num_ceiled_rounded = math.ceil(num)\n        num_squared = num_ceiled_rounded ** 2\n        sum_square += num_squared\n    return sum_square"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    else:\n        return txt[-1].isalpha() and txt[-2] == ' '"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for i in lst:\n        if i < 0:\n            if largest_negative is None or i > largest_negative:\n                largest_negative = i\n        elif i > 0:\n            if smallest_positive is None or i < smallest_positive:\n                smallest_positive = i\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert(i):\n        if isinstance(i, str):\n            try:\n                return float(i.replace(\",\", \".\"))\n            except ValueError:\n                return None\n        else:\n            return i\n\n    a1, b1 = convert(a), convert(b)\n    if a1 is None or b1 is None or a1 == b1:\n        return None\n    return a if a1 > b1 else b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    def factorial(num):\n        fact = 1\n        for i in range(1, num + 1):\n            fact *= i\n        return fact\n\n    special_fact = 1\n    for i in range(n, 0, -1):\n        special_fact *= factorial(i)\n    return special_fact"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    prefix, ext = file_name.split('.')\n    if not prefix or not prefix[0].isalpha() or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for idx, num in enumerate(lst):\n        if idx % 3 == 0:\n            total += num ** 2\n        elif idx % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_len_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_len_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split(\"/\"))\n    n_num, n_denom = map(int, n.split(\"/\"))\n\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n\n    return result_num % result_denom == 0"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        str_num = str(abs(num))\n        if num > 10 and int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    arr = [i * i - i + 1 for i in range(1, n+1)]\n    mod_count = [0, 0, 0]\n    for num in arr:\n        mod_count[num % 3] += 1\n    return mod_count[0]*(mod_count[0]-1)*(mod_count[0]-2)//6 + mod_count[1]*mod_count[2]*(mod_count[0]+mod_count[1]*(mod_count[1]-1)//2) + mod_count[1]*(mod_count[1]-1)*(mod_count[1]-2)//6 + mod_count[2]*(mod_count[2]-1)*(mod_count[2]-2)//6"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2)) + 1\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start:end])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    new_list = [word for word in lst if len(word) % 2 == 0]\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1 or (n % 2 == 0 and n > 2):\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    sum_ = 0\n    for i in lst:\n        if type(i) == int and i >= 0 and i % 2 == 1:\n            sum_ += i**2\n    return sum_"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    for extension in extensions:\n        ext_strength = strength(extension)\n        if ext_strength > max_strength:\n            max_strength = ext_strength\n            strongest_extension = extension\n            \n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    string_num = str(num)\n    even_count, odd_count = 0, 0\n    for digit in string_num:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    roman_numeral_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value in sorted(roman_numeral_map.keys(), reverse=True):\n        while num >= value:\n            num -= value\n            result += roman_numeral_map[value]\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_count = 0\n    max_word = \"\"\n    for word in sorted(words):\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i - 1] + str(operand[i])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s])"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    if a % 2!=0:a += 1\n    if b % 2!=0:b -= 1\n    return [n for n in range(a, b+1, 2)] if a <= b else []"}
